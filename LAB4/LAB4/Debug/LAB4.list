
LAB4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080027e8  080027e8  000127e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002814  08002814  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08002814  08002814  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002814  08002814  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002814  08002814  00012814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002818  08002818  00012818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  0800281c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  20000038  08002854  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  08002854  000203ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e97  00000000  00000000  00020061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b35  00000000  00000000  00028ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0002aa30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d0  00000000  00000000  0002b4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001690f  00000000  00000000  0002beb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b46a  00000000  00000000  000427c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082578  00000000  00000000  0004dc31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d01a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ab4  00000000  00000000  000d01fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000038 	.word	0x20000038
 8000128:	00000000 	.word	0x00000000
 800012c:	080027d0 	.word	0x080027d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000003c 	.word	0x2000003c
 8000148:	080027d0 	.word	0x080027d0

0800014c <handle_mode>:
 #include "led_display.h"
//#include "timer.h"

uint8_t modemode = 1;

void handle_mode(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch (modemode) {
 8000150:	4b13      	ldr	r3, [pc, #76]	; (80001a0 <handle_mode+0x54>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	3b01      	subs	r3, #1
 8000156:	2b05      	cmp	r3, #5
 8000158:	d820      	bhi.n	800019c <handle_mode+0x50>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <handle_mode+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	08000179 	.word	0x08000179
 8000164:	0800017f 	.word	0x0800017f
 8000168:	08000185 	.word	0x08000185
 800016c:	0800018b 	.word	0x0800018b
 8000170:	08000191 	.word	0x08000191
 8000174:	08000197 	.word	0x08000197
		case 1:
			normalstate();
 8000178:	f000 fb98 	bl	80008ac <normalstate>
			break;
 800017c:	e00e      	b.n	800019c <handle_mode+0x50>
		case 2:
			modify_red_duration();
 800017e:	f000 f8e3 	bl	8000348 <modify_red_duration>
			break;
 8000182:	e00b      	b.n	800019c <handle_mode+0x50>
		case 3:
			modify_yellow_duration();
 8000184:	f000 f8ea 	bl	800035c <modify_yellow_duration>
			break;
 8000188:	e008      	b.n	800019c <handle_mode+0x50>
		case 4:
			modify_green_duration();
 800018a:	f000 f8f1 	bl	8000370 <modify_green_duration>
			break;
 800018e:	e005      	b.n	800019c <handle_mode+0x50>
		case 5:
			turn_red1();
 8000190:	f000 f90e 	bl	80003b0 <turn_red1>
			break;
 8000194:	e002      	b.n	800019c <handle_mode+0x50>
		case 6:
			turn_green1();
 8000196:	f000 f8f5 	bl	8000384 <turn_green1>
			break;
 800019a:	bf00      	nop
	}

}
 800019c:	bf00      	nop
 800019e:	bd80      	pop	{r7, pc}
 80001a0:	20000000 	.word	0x20000000

080001a4 <button_reading>:
static GPIO_PinState debounceButtonBuffer2[N0_OF_BUTTONS];
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS];

static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];

void button_reading(void) {
 80001a4:	b590      	push	{r4, r7, lr}
 80001a6:	b085      	sub	sp, #20
 80001a8:	af00      	add	r7, sp, #0
    uint16_t button_pins[N0_OF_BUTTONS] = {GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_8};
 80001aa:	4a2d      	ldr	r2, [pc, #180]	; (8000260 <button_reading+0xbc>)
 80001ac:	1d3b      	adds	r3, r7, #4
 80001ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001b2:	e883 0003 	stmia.w	r3, {r0, r1}

    for (char i = 0; i < N0_OF_BUTTONS; i++) {
 80001b6:	2300      	movs	r3, #0
 80001b8:	73fb      	strb	r3, [r7, #15]
 80001ba:	e048      	b.n	800024e <button_reading+0xaa>
        debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 80001bc:	7bfa      	ldrb	r2, [r7, #15]
 80001be:	7bfb      	ldrb	r3, [r7, #15]
 80001c0:	4928      	ldr	r1, [pc, #160]	; (8000264 <button_reading+0xc0>)
 80001c2:	5c89      	ldrb	r1, [r1, r2]
 80001c4:	4a28      	ldr	r2, [pc, #160]	; (8000268 <button_reading+0xc4>)
 80001c6:	54d1      	strb	r1, [r2, r3]
        debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(GPIOB, button_pins[i]);
 80001c8:	7bfb      	ldrb	r3, [r7, #15]
 80001ca:	005b      	lsls	r3, r3, #1
 80001cc:	3310      	adds	r3, #16
 80001ce:	443b      	add	r3, r7
 80001d0:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 80001d4:	7bfc      	ldrb	r4, [r7, #15]
 80001d6:	4619      	mov	r1, r3
 80001d8:	4824      	ldr	r0, [pc, #144]	; (800026c <button_reading+0xc8>)
 80001da:	f001 facb 	bl	8001774 <HAL_GPIO_ReadPin>
 80001de:	4603      	mov	r3, r0
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b20      	ldr	r3, [pc, #128]	; (8000264 <button_reading+0xc0>)
 80001e4:	551a      	strb	r2, [r3, r4]

        if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) {
 80001e6:	7bfb      	ldrb	r3, [r7, #15]
 80001e8:	4a1e      	ldr	r2, [pc, #120]	; (8000264 <button_reading+0xc0>)
 80001ea:	5cd2      	ldrb	r2, [r2, r3]
 80001ec:	7bfb      	ldrb	r3, [r7, #15]
 80001ee:	491e      	ldr	r1, [pc, #120]	; (8000268 <button_reading+0xc4>)
 80001f0:	5ccb      	ldrb	r3, [r1, r3]
 80001f2:	429a      	cmp	r2, r3
 80001f4:	d105      	bne.n	8000202 <button_reading+0x5e>
            buttonBuffer[i] = debounceButtonBuffer1[i];
 80001f6:	7bfa      	ldrb	r2, [r7, #15]
 80001f8:	7bfb      	ldrb	r3, [r7, #15]
 80001fa:	491a      	ldr	r1, [pc, #104]	; (8000264 <button_reading+0xc0>)
 80001fc:	5c89      	ldrb	r1, [r1, r2]
 80001fe:	4a1c      	ldr	r2, [pc, #112]	; (8000270 <button_reading+0xcc>)
 8000200:	54d1      	strb	r1, [r2, r3]
        }

        if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 8000202:	7bfb      	ldrb	r3, [r7, #15]
 8000204:	4a1a      	ldr	r2, [pc, #104]	; (8000270 <button_reading+0xcc>)
 8000206:	5cd3      	ldrb	r3, [r2, r3]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d114      	bne.n	8000236 <button_reading+0x92>
            if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 800020c:	7bfb      	ldrb	r3, [r7, #15]
 800020e:	4a19      	ldr	r2, [pc, #100]	; (8000274 <button_reading+0xd0>)
 8000210:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000214:	2b63      	cmp	r3, #99	; 0x63
 8000216:	d809      	bhi.n	800022c <button_reading+0x88>
                counterForButtonPress1s[i]++;
 8000218:	7bfb      	ldrb	r3, [r7, #15]
 800021a:	4a16      	ldr	r2, [pc, #88]	; (8000274 <button_reading+0xd0>)
 800021c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000220:	3201      	adds	r2, #1
 8000222:	b291      	uxth	r1, r2
 8000224:	4a13      	ldr	r2, [pc, #76]	; (8000274 <button_reading+0xd0>)
 8000226:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800022a:	e00d      	b.n	8000248 <button_reading+0xa4>
            } else {
                flagForButtonPress1s[i] = 1;
 800022c:	7bfb      	ldrb	r3, [r7, #15]
 800022e:	4a12      	ldr	r2, [pc, #72]	; (8000278 <button_reading+0xd4>)
 8000230:	2101      	movs	r1, #1
 8000232:	54d1      	strb	r1, [r2, r3]
 8000234:	e008      	b.n	8000248 <button_reading+0xa4>
            }
        } else {
            counterForButtonPress1s[i] = 0;
 8000236:	7bfb      	ldrb	r3, [r7, #15]
 8000238:	4a0e      	ldr	r2, [pc, #56]	; (8000274 <button_reading+0xd0>)
 800023a:	2100      	movs	r1, #0
 800023c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            flagForButtonPress1s[i] = 0;
 8000240:	7bfb      	ldrb	r3, [r7, #15]
 8000242:	4a0d      	ldr	r2, [pc, #52]	; (8000278 <button_reading+0xd4>)
 8000244:	2100      	movs	r1, #0
 8000246:	54d1      	strb	r1, [r2, r3]
    for (char i = 0; i < N0_OF_BUTTONS; i++) {
 8000248:	7bfb      	ldrb	r3, [r7, #15]
 800024a:	3301      	adds	r3, #1
 800024c:	73fb      	strb	r3, [r7, #15]
 800024e:	7bfb      	ldrb	r3, [r7, #15]
 8000250:	2b03      	cmp	r3, #3
 8000252:	d9b3      	bls.n	80001bc <button_reading+0x18>
        }
    }
}
 8000254:	bf00      	nop
 8000256:	bf00      	nop
 8000258:	3714      	adds	r7, #20
 800025a:	46bd      	mov	sp, r7
 800025c:	bd90      	pop	{r4, r7, pc}
 800025e:	bf00      	nop
 8000260:	080027e8 	.word	0x080027e8
 8000264:	20000058 	.word	0x20000058
 8000268:	2000005c 	.word	0x2000005c
 800026c:	40010c00 	.word	0x40010c00
 8000270:	20000054 	.word	0x20000054
 8000274:	20000064 	.word	0x20000064
 8000278:	20000060 	.word	0x20000060

0800027c <led_red_blink>:
#include "input_processing.h"
#include "led_display.h"
int count=0,cnt=0;

// function blink led
void led_red_blink(){
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(red1_GPIO_Port, red1_Pin);
 8000280:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000284:	4804      	ldr	r0, [pc, #16]	; (8000298 <led_red_blink+0x1c>)
 8000286:	f001 faa4 	bl	80017d2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(red2_GPIO_Port, red2_Pin);
 800028a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800028e:	4802      	ldr	r0, [pc, #8]	; (8000298 <led_red_blink+0x1c>)
 8000290:	f001 fa9f 	bl	80017d2 <HAL_GPIO_TogglePin>
}
 8000294:	bf00      	nop
 8000296:	bd80      	pop	{r7, pc}
 8000298:	40010c00 	.word	0x40010c00

0800029c <led_green_blink>:
void led_green_blink(){
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(green1_GPIO_Port, green1_Pin);
 80002a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <led_green_blink+0x1c>)
 80002a6:	f001 fa94 	bl	80017d2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(green2_GPIO_Port, green2_Pin);
 80002aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002ae:	4802      	ldr	r0, [pc, #8]	; (80002b8 <led_green_blink+0x1c>)
 80002b0:	f001 fa8f 	bl	80017d2 <HAL_GPIO_TogglePin>
}
 80002b4:	bf00      	nop
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	40010c00 	.word	0x40010c00

080002bc <led_yellow_blink>:
void led_yellow_blink(){
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(yellow1_GPIO_Port, yellow1_Pin);
 80002c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002c4:	4804      	ldr	r0, [pc, #16]	; (80002d8 <led_yellow_blink+0x1c>)
 80002c6:	f001 fa84 	bl	80017d2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(yellow2_GPIO_Port, yellow2_Pin);
 80002ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002ce:	4802      	ldr	r0, [pc, #8]	; (80002d8 <led_yellow_blink+0x1c>)
 80002d0:	f001 fa7f 	bl	80017d2 <HAL_GPIO_TogglePin>
}
 80002d4:	bf00      	nop
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	40010c00 	.word	0x40010c00

080002dc <off_red_led>:

// function turn off led
void off_red_led(){
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, red1_Pin, 0);
 80002e0:	2200      	movs	r2, #0
 80002e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002e6:	4805      	ldr	r0, [pc, #20]	; (80002fc <off_red_led+0x20>)
 80002e8:	f001 fa5b 	bl	80017a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, red2_Pin, 0);
 80002ec:	2200      	movs	r2, #0
 80002ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002f2:	4802      	ldr	r0, [pc, #8]	; (80002fc <off_red_led+0x20>)
 80002f4:	f001 fa55 	bl	80017a2 <HAL_GPIO_WritePin>

}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	40010c00 	.word	0x40010c00

08000300 <off_yellow_led>:
void off_yellow_led(){
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, yellow1_Pin, 0);
 8000304:	2200      	movs	r2, #0
 8000306:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800030a:	4805      	ldr	r0, [pc, #20]	; (8000320 <off_yellow_led+0x20>)
 800030c:	f001 fa49 	bl	80017a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, yellow2_Pin, 0);
 8000310:	2200      	movs	r2, #0
 8000312:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000316:	4802      	ldr	r0, [pc, #8]	; (8000320 <off_yellow_led+0x20>)
 8000318:	f001 fa43 	bl	80017a2 <HAL_GPIO_WritePin>

}
 800031c:	bf00      	nop
 800031e:	bd80      	pop	{r7, pc}
 8000320:	40010c00 	.word	0x40010c00

08000324 <off_green_led>:
void off_green_led(){
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, green1_Pin, 0);
 8000328:	2200      	movs	r2, #0
 800032a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800032e:	4805      	ldr	r0, [pc, #20]	; (8000344 <off_green_led+0x20>)
 8000330:	f001 fa37 	bl	80017a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, green2_Pin, 0);
 8000334:	2200      	movs	r2, #0
 8000336:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800033a:	4802      	ldr	r0, [pc, #8]	; (8000344 <off_green_led+0x20>)
 800033c:	f001 fa31 	bl	80017a2 <HAL_GPIO_WritePin>

}
 8000340:	bf00      	nop
 8000342:	bd80      	pop	{r7, pc}
 8000344:	40010c00 	.word	0x40010c00

08000348 <modify_red_duration>:

void modify_red_duration()
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
	off_yellow_led();
 800034c:	f7ff ffd8 	bl	8000300 <off_yellow_led>
	off_green_led();
 8000350:	f7ff ffe8 	bl	8000324 <off_green_led>

	led_red_blink();
 8000354:	f7ff ff92 	bl	800027c <led_red_blink>
}
 8000358:	bf00      	nop
 800035a:	bd80      	pop	{r7, pc}

0800035c <modify_yellow_duration>:
void modify_yellow_duration()
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
	off_red_led();
 8000360:	f7ff ffbc 	bl	80002dc <off_red_led>
	off_green_led();
 8000364:	f7ff ffde 	bl	8000324 <off_green_led>

	led_yellow_blink();
 8000368:	f7ff ffa8 	bl	80002bc <led_yellow_blink>
}
 800036c:	bf00      	nop
 800036e:	bd80      	pop	{r7, pc}

08000370 <modify_green_duration>:
void modify_green_duration()
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	off_red_led();
 8000374:	f7ff ffb2 	bl	80002dc <off_red_led>
	off_yellow_led();
 8000378:	f7ff ffc2 	bl	8000300 <off_yellow_led>

	led_green_blink();
 800037c:	f7ff ff8e 	bl	800029c <led_green_blink>
}
 8000380:	bf00      	nop
 8000382:	bd80      	pop	{r7, pc}

08000384 <turn_green1>:

void turn_green1(){
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
	off_red_led();
 8000388:	f7ff ffa8 	bl	80002dc <off_red_led>
	off_green_led();
 800038c:	f7ff ffca 	bl	8000324 <off_green_led>
	HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, SET);
 8000390:	2201      	movs	r2, #1
 8000392:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000396:	4805      	ldr	r0, [pc, #20]	; (80003ac <turn_green1+0x28>)
 8000398:	f001 fa03 	bl	80017a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, SET);
 800039c:	2201      	movs	r2, #1
 800039e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003a2:	4802      	ldr	r0, [pc, #8]	; (80003ac <turn_green1+0x28>)
 80003a4:	f001 f9fd 	bl	80017a2 <HAL_GPIO_WritePin>
}
 80003a8:	bf00      	nop
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	40010c00 	.word	0x40010c00

080003b0 <turn_red1>:

void turn_red1(){
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	off_green_led();
 80003b4:	f7ff ffb6 	bl	8000324 <off_green_led>
	HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, SET);
 80003b8:	2201      	movs	r2, #1
 80003ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003be:	4805      	ldr	r0, [pc, #20]	; (80003d4 <turn_red1+0x24>)
 80003c0:	f001 f9ef 	bl	80017a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, SET);
 80003c4:	2201      	movs	r2, #1
 80003c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003ca:	4802      	ldr	r0, [pc, #8]	; (80003d4 <turn_red1+0x24>)
 80003cc:	f001 f9e9 	bl	80017a2 <HAL_GPIO_WritePin>
}
 80003d0:	bf00      	nop
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	40010c00 	.word	0x40010c00

080003d8 <display1>:
void display1(int num){
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
	switch (num){
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	2b09      	cmp	r3, #9
 80003e4:	f200 8180 	bhi.w	80006e8 <display1+0x310>
 80003e8:	a201      	add	r2, pc, #4	; (adr r2, 80003f0 <display1+0x18>)
 80003ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ee:	bf00      	nop
 80003f0:	08000419 	.word	0x08000419
 80003f4:	08000461 	.word	0x08000461
 80003f8:	080004a9 	.word	0x080004a9
 80003fc:	080004f1 	.word	0x080004f1
 8000400:	08000539 	.word	0x08000539
 8000404:	08000581 	.word	0x08000581
 8000408:	080005c9 	.word	0x080005c9
 800040c:	08000611 	.word	0x08000611
 8000410:	08000659 	.word	0x08000659
 8000414:	080006a1 	.word	0x080006a1
	case 0:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, 0);
 8000418:	2200      	movs	r2, #0
 800041a:	2101      	movs	r1, #1
 800041c:	48b5      	ldr	r0, [pc, #724]	; (80006f4 <display1+0x31c>)
 800041e:	f001 f9c0 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, 0);
 8000422:	2200      	movs	r2, #0
 8000424:	2102      	movs	r1, #2
 8000426:	48b3      	ldr	r0, [pc, #716]	; (80006f4 <display1+0x31c>)
 8000428:	f001 f9bb 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, 0);
 800042c:	2200      	movs	r2, #0
 800042e:	2104      	movs	r1, #4
 8000430:	48b0      	ldr	r0, [pc, #704]	; (80006f4 <display1+0x31c>)
 8000432:	f001 f9b6 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, 0);
 8000436:	2200      	movs	r2, #0
 8000438:	2108      	movs	r1, #8
 800043a:	48ae      	ldr	r0, [pc, #696]	; (80006f4 <display1+0x31c>)
 800043c:	f001 f9b1 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, 0);
 8000440:	2200      	movs	r2, #0
 8000442:	2110      	movs	r1, #16
 8000444:	48ab      	ldr	r0, [pc, #684]	; (80006f4 <display1+0x31c>)
 8000446:	f001 f9ac 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, 0);
 800044a:	2200      	movs	r2, #0
 800044c:	2120      	movs	r1, #32
 800044e:	48a9      	ldr	r0, [pc, #676]	; (80006f4 <display1+0x31c>)
 8000450:	f001 f9a7 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, 1);
 8000454:	2201      	movs	r2, #1
 8000456:	2140      	movs	r1, #64	; 0x40
 8000458:	48a6      	ldr	r0, [pc, #664]	; (80006f4 <display1+0x31c>)
 800045a:	f001 f9a2 	bl	80017a2 <HAL_GPIO_WritePin>
		break;
 800045e:	e144      	b.n	80006ea <display1+0x312>
	case 1:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, 1);
 8000460:	2201      	movs	r2, #1
 8000462:	2101      	movs	r1, #1
 8000464:	48a3      	ldr	r0, [pc, #652]	; (80006f4 <display1+0x31c>)
 8000466:	f001 f99c 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, 1);
 800046a:	2201      	movs	r2, #1
 800046c:	2108      	movs	r1, #8
 800046e:	48a1      	ldr	r0, [pc, #644]	; (80006f4 <display1+0x31c>)
 8000470:	f001 f997 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, 1);
 8000474:	2201      	movs	r2, #1
 8000476:	2110      	movs	r1, #16
 8000478:	489e      	ldr	r0, [pc, #632]	; (80006f4 <display1+0x31c>)
 800047a:	f001 f992 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, 1);
 800047e:	2201      	movs	r2, #1
 8000480:	2120      	movs	r1, #32
 8000482:	489c      	ldr	r0, [pc, #624]	; (80006f4 <display1+0x31c>)
 8000484:	f001 f98d 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, 1);
 8000488:	2201      	movs	r2, #1
 800048a:	2140      	movs	r1, #64	; 0x40
 800048c:	4899      	ldr	r0, [pc, #612]	; (80006f4 <display1+0x31c>)
 800048e:	f001 f988 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, 0);
 8000492:	2200      	movs	r2, #0
 8000494:	2102      	movs	r1, #2
 8000496:	4897      	ldr	r0, [pc, #604]	; (80006f4 <display1+0x31c>)
 8000498:	f001 f983 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, 0);
 800049c:	2200      	movs	r2, #0
 800049e:	2104      	movs	r1, #4
 80004a0:	4894      	ldr	r0, [pc, #592]	; (80006f4 <display1+0x31c>)
 80004a2:	f001 f97e 	bl	80017a2 <HAL_GPIO_WritePin>
			break;
 80004a6:	e120      	b.n	80006ea <display1+0x312>
	case 2:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, 0);
 80004a8:	2200      	movs	r2, #0
 80004aa:	2101      	movs	r1, #1
 80004ac:	4891      	ldr	r0, [pc, #580]	; (80006f4 <display1+0x31c>)
 80004ae:	f001 f978 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, 0);
 80004b2:	2200      	movs	r2, #0
 80004b4:	2102      	movs	r1, #2
 80004b6:	488f      	ldr	r0, [pc, #572]	; (80006f4 <display1+0x31c>)
 80004b8:	f001 f973 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, 1);
 80004bc:	2201      	movs	r2, #1
 80004be:	2104      	movs	r1, #4
 80004c0:	488c      	ldr	r0, [pc, #560]	; (80006f4 <display1+0x31c>)
 80004c2:	f001 f96e 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, 0);
 80004c6:	2200      	movs	r2, #0
 80004c8:	2108      	movs	r1, #8
 80004ca:	488a      	ldr	r0, [pc, #552]	; (80006f4 <display1+0x31c>)
 80004cc:	f001 f969 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, 0);
 80004d0:	2200      	movs	r2, #0
 80004d2:	2110      	movs	r1, #16
 80004d4:	4887      	ldr	r0, [pc, #540]	; (80006f4 <display1+0x31c>)
 80004d6:	f001 f964 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, 1);
 80004da:	2201      	movs	r2, #1
 80004dc:	2120      	movs	r1, #32
 80004de:	4885      	ldr	r0, [pc, #532]	; (80006f4 <display1+0x31c>)
 80004e0:	f001 f95f 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, 0);
 80004e4:	2200      	movs	r2, #0
 80004e6:	2140      	movs	r1, #64	; 0x40
 80004e8:	4882      	ldr	r0, [pc, #520]	; (80006f4 <display1+0x31c>)
 80004ea:	f001 f95a 	bl	80017a2 <HAL_GPIO_WritePin>
			break;
 80004ee:	e0fc      	b.n	80006ea <display1+0x312>
	case 3:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, 0);
 80004f0:	2200      	movs	r2, #0
 80004f2:	2101      	movs	r1, #1
 80004f4:	487f      	ldr	r0, [pc, #508]	; (80006f4 <display1+0x31c>)
 80004f6:	f001 f954 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, 0);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2102      	movs	r1, #2
 80004fe:	487d      	ldr	r0, [pc, #500]	; (80006f4 <display1+0x31c>)
 8000500:	f001 f94f 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, 0);
 8000504:	2200      	movs	r2, #0
 8000506:	2104      	movs	r1, #4
 8000508:	487a      	ldr	r0, [pc, #488]	; (80006f4 <display1+0x31c>)
 800050a:	f001 f94a 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, 0);
 800050e:	2200      	movs	r2, #0
 8000510:	2108      	movs	r1, #8
 8000512:	4878      	ldr	r0, [pc, #480]	; (80006f4 <display1+0x31c>)
 8000514:	f001 f945 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, 1);
 8000518:	2201      	movs	r2, #1
 800051a:	2110      	movs	r1, #16
 800051c:	4875      	ldr	r0, [pc, #468]	; (80006f4 <display1+0x31c>)
 800051e:	f001 f940 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, 1);
 8000522:	2201      	movs	r2, #1
 8000524:	2120      	movs	r1, #32
 8000526:	4873      	ldr	r0, [pc, #460]	; (80006f4 <display1+0x31c>)
 8000528:	f001 f93b 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, 0);
 800052c:	2200      	movs	r2, #0
 800052e:	2140      	movs	r1, #64	; 0x40
 8000530:	4870      	ldr	r0, [pc, #448]	; (80006f4 <display1+0x31c>)
 8000532:	f001 f936 	bl	80017a2 <HAL_GPIO_WritePin>
			break;
 8000536:	e0d8      	b.n	80006ea <display1+0x312>
	case 4:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, 1);
 8000538:	2201      	movs	r2, #1
 800053a:	2101      	movs	r1, #1
 800053c:	486d      	ldr	r0, [pc, #436]	; (80006f4 <display1+0x31c>)
 800053e:	f001 f930 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, 0);
 8000542:	2200      	movs	r2, #0
 8000544:	2102      	movs	r1, #2
 8000546:	486b      	ldr	r0, [pc, #428]	; (80006f4 <display1+0x31c>)
 8000548:	f001 f92b 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, 0);
 800054c:	2200      	movs	r2, #0
 800054e:	2104      	movs	r1, #4
 8000550:	4868      	ldr	r0, [pc, #416]	; (80006f4 <display1+0x31c>)
 8000552:	f001 f926 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, 1);
 8000556:	2201      	movs	r2, #1
 8000558:	2108      	movs	r1, #8
 800055a:	4866      	ldr	r0, [pc, #408]	; (80006f4 <display1+0x31c>)
 800055c:	f001 f921 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, 1);
 8000560:	2201      	movs	r2, #1
 8000562:	2110      	movs	r1, #16
 8000564:	4863      	ldr	r0, [pc, #396]	; (80006f4 <display1+0x31c>)
 8000566:	f001 f91c 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, 0);
 800056a:	2200      	movs	r2, #0
 800056c:	2120      	movs	r1, #32
 800056e:	4861      	ldr	r0, [pc, #388]	; (80006f4 <display1+0x31c>)
 8000570:	f001 f917 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, 0);
 8000574:	2200      	movs	r2, #0
 8000576:	2140      	movs	r1, #64	; 0x40
 8000578:	485e      	ldr	r0, [pc, #376]	; (80006f4 <display1+0x31c>)
 800057a:	f001 f912 	bl	80017a2 <HAL_GPIO_WritePin>
			break;
 800057e:	e0b4      	b.n	80006ea <display1+0x312>
	case 5:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, 0);
 8000580:	2200      	movs	r2, #0
 8000582:	2101      	movs	r1, #1
 8000584:	485b      	ldr	r0, [pc, #364]	; (80006f4 <display1+0x31c>)
 8000586:	f001 f90c 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, 1);
 800058a:	2201      	movs	r2, #1
 800058c:	2102      	movs	r1, #2
 800058e:	4859      	ldr	r0, [pc, #356]	; (80006f4 <display1+0x31c>)
 8000590:	f001 f907 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, 0);
 8000594:	2200      	movs	r2, #0
 8000596:	2104      	movs	r1, #4
 8000598:	4856      	ldr	r0, [pc, #344]	; (80006f4 <display1+0x31c>)
 800059a:	f001 f902 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, 0);
 800059e:	2200      	movs	r2, #0
 80005a0:	2108      	movs	r1, #8
 80005a2:	4854      	ldr	r0, [pc, #336]	; (80006f4 <display1+0x31c>)
 80005a4:	f001 f8fd 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, 1);
 80005a8:	2201      	movs	r2, #1
 80005aa:	2110      	movs	r1, #16
 80005ac:	4851      	ldr	r0, [pc, #324]	; (80006f4 <display1+0x31c>)
 80005ae:	f001 f8f8 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, 0);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2120      	movs	r1, #32
 80005b6:	484f      	ldr	r0, [pc, #316]	; (80006f4 <display1+0x31c>)
 80005b8:	f001 f8f3 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, 0);
 80005bc:	2200      	movs	r2, #0
 80005be:	2140      	movs	r1, #64	; 0x40
 80005c0:	484c      	ldr	r0, [pc, #304]	; (80006f4 <display1+0x31c>)
 80005c2:	f001 f8ee 	bl	80017a2 <HAL_GPIO_WritePin>
			break;
 80005c6:	e090      	b.n	80006ea <display1+0x312>
	case 6:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, 0);
 80005c8:	2200      	movs	r2, #0
 80005ca:	2101      	movs	r1, #1
 80005cc:	4849      	ldr	r0, [pc, #292]	; (80006f4 <display1+0x31c>)
 80005ce:	f001 f8e8 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, 1);
 80005d2:	2201      	movs	r2, #1
 80005d4:	2102      	movs	r1, #2
 80005d6:	4847      	ldr	r0, [pc, #284]	; (80006f4 <display1+0x31c>)
 80005d8:	f001 f8e3 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, 0);
 80005dc:	2200      	movs	r2, #0
 80005de:	2104      	movs	r1, #4
 80005e0:	4844      	ldr	r0, [pc, #272]	; (80006f4 <display1+0x31c>)
 80005e2:	f001 f8de 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2108      	movs	r1, #8
 80005ea:	4842      	ldr	r0, [pc, #264]	; (80006f4 <display1+0x31c>)
 80005ec:	f001 f8d9 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, 0);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2110      	movs	r1, #16
 80005f4:	483f      	ldr	r0, [pc, #252]	; (80006f4 <display1+0x31c>)
 80005f6:	f001 f8d4 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, 0);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2120      	movs	r1, #32
 80005fe:	483d      	ldr	r0, [pc, #244]	; (80006f4 <display1+0x31c>)
 8000600:	f001 f8cf 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, 0);
 8000604:	2200      	movs	r2, #0
 8000606:	2140      	movs	r1, #64	; 0x40
 8000608:	483a      	ldr	r0, [pc, #232]	; (80006f4 <display1+0x31c>)
 800060a:	f001 f8ca 	bl	80017a2 <HAL_GPIO_WritePin>
			break;
 800060e:	e06c      	b.n	80006ea <display1+0x312>
	case 7:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, 0);
 8000610:	2200      	movs	r2, #0
 8000612:	2101      	movs	r1, #1
 8000614:	4837      	ldr	r0, [pc, #220]	; (80006f4 <display1+0x31c>)
 8000616:	f001 f8c4 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	2102      	movs	r1, #2
 800061e:	4835      	ldr	r0, [pc, #212]	; (80006f4 <display1+0x31c>)
 8000620:	f001 f8bf 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, 0);
 8000624:	2200      	movs	r2, #0
 8000626:	2104      	movs	r1, #4
 8000628:	4832      	ldr	r0, [pc, #200]	; (80006f4 <display1+0x31c>)
 800062a:	f001 f8ba 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, 1);
 800062e:	2201      	movs	r2, #1
 8000630:	2108      	movs	r1, #8
 8000632:	4830      	ldr	r0, [pc, #192]	; (80006f4 <display1+0x31c>)
 8000634:	f001 f8b5 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, 1);
 8000638:	2201      	movs	r2, #1
 800063a:	2110      	movs	r1, #16
 800063c:	482d      	ldr	r0, [pc, #180]	; (80006f4 <display1+0x31c>)
 800063e:	f001 f8b0 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, 1);
 8000642:	2201      	movs	r2, #1
 8000644:	2120      	movs	r1, #32
 8000646:	482b      	ldr	r0, [pc, #172]	; (80006f4 <display1+0x31c>)
 8000648:	f001 f8ab 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, 1);
 800064c:	2201      	movs	r2, #1
 800064e:	2140      	movs	r1, #64	; 0x40
 8000650:	4828      	ldr	r0, [pc, #160]	; (80006f4 <display1+0x31c>)
 8000652:	f001 f8a6 	bl	80017a2 <HAL_GPIO_WritePin>
			break;
 8000656:	e048      	b.n	80006ea <display1+0x312>
	case 8:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, 0);
 8000658:	2200      	movs	r2, #0
 800065a:	2101      	movs	r1, #1
 800065c:	4825      	ldr	r0, [pc, #148]	; (80006f4 <display1+0x31c>)
 800065e:	f001 f8a0 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, 0);
 8000662:	2200      	movs	r2, #0
 8000664:	2102      	movs	r1, #2
 8000666:	4823      	ldr	r0, [pc, #140]	; (80006f4 <display1+0x31c>)
 8000668:	f001 f89b 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, 0);
 800066c:	2200      	movs	r2, #0
 800066e:	2104      	movs	r1, #4
 8000670:	4820      	ldr	r0, [pc, #128]	; (80006f4 <display1+0x31c>)
 8000672:	f001 f896 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, 0);
 8000676:	2200      	movs	r2, #0
 8000678:	2108      	movs	r1, #8
 800067a:	481e      	ldr	r0, [pc, #120]	; (80006f4 <display1+0x31c>)
 800067c:	f001 f891 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, 0);
 8000680:	2200      	movs	r2, #0
 8000682:	2110      	movs	r1, #16
 8000684:	481b      	ldr	r0, [pc, #108]	; (80006f4 <display1+0x31c>)
 8000686:	f001 f88c 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, 0);
 800068a:	2200      	movs	r2, #0
 800068c:	2120      	movs	r1, #32
 800068e:	4819      	ldr	r0, [pc, #100]	; (80006f4 <display1+0x31c>)
 8000690:	f001 f887 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, 0);
 8000694:	2200      	movs	r2, #0
 8000696:	2140      	movs	r1, #64	; 0x40
 8000698:	4816      	ldr	r0, [pc, #88]	; (80006f4 <display1+0x31c>)
 800069a:	f001 f882 	bl	80017a2 <HAL_GPIO_WritePin>
			break;
 800069e:	e024      	b.n	80006ea <display1+0x312>
	case 9:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, 0);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2101      	movs	r1, #1
 80006a4:	4813      	ldr	r0, [pc, #76]	; (80006f4 <display1+0x31c>)
 80006a6:	f001 f87c 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2102      	movs	r1, #2
 80006ae:	4811      	ldr	r0, [pc, #68]	; (80006f4 <display1+0x31c>)
 80006b0:	f001 f877 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, 0);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2104      	movs	r1, #4
 80006b8:	480e      	ldr	r0, [pc, #56]	; (80006f4 <display1+0x31c>)
 80006ba:	f001 f872 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, 0);
 80006be:	2200      	movs	r2, #0
 80006c0:	2108      	movs	r1, #8
 80006c2:	480c      	ldr	r0, [pc, #48]	; (80006f4 <display1+0x31c>)
 80006c4:	f001 f86d 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, 1);
 80006c8:	2201      	movs	r2, #1
 80006ca:	2110      	movs	r1, #16
 80006cc:	4809      	ldr	r0, [pc, #36]	; (80006f4 <display1+0x31c>)
 80006ce:	f001 f868 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2120      	movs	r1, #32
 80006d6:	4807      	ldr	r0, [pc, #28]	; (80006f4 <display1+0x31c>)
 80006d8:	f001 f863 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, 0);
 80006dc:	2200      	movs	r2, #0
 80006de:	2140      	movs	r1, #64	; 0x40
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <display1+0x31c>)
 80006e2:	f001 f85e 	bl	80017a2 <HAL_GPIO_WritePin>
			break;
 80006e6:	e000      	b.n	80006ea <display1+0x312>
	default:
		break;
 80006e8:	bf00      	nop
	}
}
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40010800 	.word	0x40010800

080006f8 <display2number>:
const uint16_t digit_pins_2[] = { EN2_Pin, EN4_Pin};

uint8_t digit1, digit2,digit3,digit4 ;
int mode=1;

void display2number(int num1,int num2){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	6039      	str	r1, [r7, #0]
    digit1 = num1 / 10;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4a59      	ldr	r2, [pc, #356]	; (800086c <display2number+0x174>)
 8000706:	fb82 1203 	smull	r1, r2, r2, r3
 800070a:	1092      	asrs	r2, r2, #2
 800070c:	17db      	asrs	r3, r3, #31
 800070e:	1ad3      	subs	r3, r2, r3
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b57      	ldr	r3, [pc, #348]	; (8000870 <display2number+0x178>)
 8000714:	701a      	strb	r2, [r3, #0]
    digit2 = num1 % 10;
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	4b54      	ldr	r3, [pc, #336]	; (800086c <display2number+0x174>)
 800071a:	fb83 1302 	smull	r1, r3, r3, r2
 800071e:	1099      	asrs	r1, r3, #2
 8000720:	17d3      	asrs	r3, r2, #31
 8000722:	1ac9      	subs	r1, r1, r3
 8000724:	460b      	mov	r3, r1
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	440b      	add	r3, r1
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	1ad1      	subs	r1, r2, r3
 800072e:	b2ca      	uxtb	r2, r1
 8000730:	4b50      	ldr	r3, [pc, #320]	; (8000874 <display2number+0x17c>)
 8000732:	701a      	strb	r2, [r3, #0]
    digit3 = num2 / 10;
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	4a4d      	ldr	r2, [pc, #308]	; (800086c <display2number+0x174>)
 8000738:	fb82 1203 	smull	r1, r2, r2, r3
 800073c:	1092      	asrs	r2, r2, #2
 800073e:	17db      	asrs	r3, r3, #31
 8000740:	1ad3      	subs	r3, r2, r3
 8000742:	b2da      	uxtb	r2, r3
 8000744:	4b4c      	ldr	r3, [pc, #304]	; (8000878 <display2number+0x180>)
 8000746:	701a      	strb	r2, [r3, #0]
    digit4 = num2 % 10;
 8000748:	683a      	ldr	r2, [r7, #0]
 800074a:	4b48      	ldr	r3, [pc, #288]	; (800086c <display2number+0x174>)
 800074c:	fb83 1302 	smull	r1, r3, r3, r2
 8000750:	1099      	asrs	r1, r3, #2
 8000752:	17d3      	asrs	r3, r2, #31
 8000754:	1ac9      	subs	r1, r1, r3
 8000756:	460b      	mov	r3, r1
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	440b      	add	r3, r1
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	1ad1      	subs	r1, r2, r3
 8000760:	b2ca      	uxtb	r2, r1
 8000762:	4b46      	ldr	r3, [pc, #280]	; (800087c <display2number+0x184>)
 8000764:	701a      	strb	r2, [r3, #0]
    if (num1 < 10) digit1 = 0;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2b09      	cmp	r3, #9
 800076a:	dc02      	bgt.n	8000772 <display2number+0x7a>
 800076c:	4b40      	ldr	r3, [pc, #256]	; (8000870 <display2number+0x178>)
 800076e:	2200      	movs	r2, #0
 8000770:	701a      	strb	r2, [r3, #0]
    if (num2 < 10) digit3 = 0;
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	2b09      	cmp	r3, #9
 8000776:	dc02      	bgt.n	800077e <display2number+0x86>
 8000778:	4b3f      	ldr	r3, [pc, #252]	; (8000878 <display2number+0x180>)
 800077a:	2200      	movs	r2, #0
 800077c:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOB, EN1_Pin|EN2_Pin|EN3_Pin|EN4_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	2178      	movs	r1, #120	; 0x78
 8000782:	483f      	ldr	r0, [pc, #252]	; (8000880 <display2number+0x188>)
 8000784:	f001 f80d 	bl	80017a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, mode_Pin, 0);
 8000788:	2200      	movs	r2, #0
 800078a:	2180      	movs	r1, #128	; 0x80
 800078c:	483c      	ldr	r0, [pc, #240]	; (8000880 <display2number+0x188>)
 800078e:	f001 f808 	bl	80017a2 <HAL_GPIO_WritePin>

    switch (digit_index){
 8000792:	4b3c      	ldr	r3, [pc, #240]	; (8000884 <display2number+0x18c>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	2b04      	cmp	r3, #4
 8000798:	d857      	bhi.n	800084a <display2number+0x152>
 800079a:	a201      	add	r2, pc, #4	; (adr r2, 80007a0 <display2number+0xa8>)
 800079c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a0:	080007b5 	.word	0x080007b5
 80007a4:	080007cb 	.word	0x080007cb
 80007a8:	080007eb 	.word	0x080007eb
 80007ac:	0800080b 	.word	0x0800080b
 80007b0:	0800082b 	.word	0x0800082b
    case 0:
    	HAL_GPIO_WritePin(GPIOB, mode_Pin, 1);
 80007b4:	2201      	movs	r2, #1
 80007b6:	2180      	movs	r1, #128	; 0x80
 80007b8:	4831      	ldr	r0, [pc, #196]	; (8000880 <display2number+0x188>)
 80007ba:	f000 fff2 	bl	80017a2 <HAL_GPIO_WritePin>
    	display1(mode);
 80007be:	4b32      	ldr	r3, [pc, #200]	; (8000888 <display2number+0x190>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fe08 	bl	80003d8 <display1>
    	break;
 80007c8:	e040      	b.n	800084c <display2number+0x154>
    case 1:
		HAL_GPIO_WritePin(GPIOB, EN2_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2110      	movs	r1, #16
 80007ce:	482c      	ldr	r0, [pc, #176]	; (8000880 <display2number+0x188>)
 80007d0:	f000 ffe7 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, EN1_Pin, GPIO_PIN_SET);
 80007d4:	2201      	movs	r2, #1
 80007d6:	2108      	movs	r1, #8
 80007d8:	4829      	ldr	r0, [pc, #164]	; (8000880 <display2number+0x188>)
 80007da:	f000 ffe2 	bl	80017a2 <HAL_GPIO_WritePin>
		display1(digit1);
 80007de:	4b24      	ldr	r3, [pc, #144]	; (8000870 <display2number+0x178>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff fdf8 	bl	80003d8 <display1>
    	break;
 80007e8:	e030      	b.n	800084c <display2number+0x154>
    case 2:
		HAL_GPIO_WritePin(GPIOB, EN1_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2108      	movs	r1, #8
 80007ee:	4824      	ldr	r0, [pc, #144]	; (8000880 <display2number+0x188>)
 80007f0:	f000 ffd7 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, EN2_Pin, GPIO_PIN_SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	2110      	movs	r1, #16
 80007f8:	4821      	ldr	r0, [pc, #132]	; (8000880 <display2number+0x188>)
 80007fa:	f000 ffd2 	bl	80017a2 <HAL_GPIO_WritePin>
		display1(digit2);
 80007fe:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <display2number+0x17c>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff fde8 	bl	80003d8 <display1>
        	break;
 8000808:	e020      	b.n	800084c <display2number+0x154>
    case 3:
		HAL_GPIO_WritePin(GPIOB, EN4_Pin, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	2140      	movs	r1, #64	; 0x40
 800080e:	481c      	ldr	r0, [pc, #112]	; (8000880 <display2number+0x188>)
 8000810:	f000 ffc7 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, EN3_Pin, GPIO_PIN_SET);
 8000814:	2201      	movs	r2, #1
 8000816:	2120      	movs	r1, #32
 8000818:	4819      	ldr	r0, [pc, #100]	; (8000880 <display2number+0x188>)
 800081a:	f000 ffc2 	bl	80017a2 <HAL_GPIO_WritePin>
		display1(digit3);
 800081e:	4b16      	ldr	r3, [pc, #88]	; (8000878 <display2number+0x180>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff fdd8 	bl	80003d8 <display1>
        	break;
 8000828:	e010      	b.n	800084c <display2number+0x154>
    case 4:
		HAL_GPIO_WritePin(GPIOB, EN3_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2120      	movs	r1, #32
 800082e:	4814      	ldr	r0, [pc, #80]	; (8000880 <display2number+0x188>)
 8000830:	f000 ffb7 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, EN4_Pin, GPIO_PIN_SET);
 8000834:	2201      	movs	r2, #1
 8000836:	2140      	movs	r1, #64	; 0x40
 8000838:	4811      	ldr	r0, [pc, #68]	; (8000880 <display2number+0x188>)
 800083a:	f000 ffb2 	bl	80017a2 <HAL_GPIO_WritePin>
		display1(digit4);
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <display2number+0x184>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff fdc8 	bl	80003d8 <display1>
        	break;
 8000848:	e000      	b.n	800084c <display2number+0x154>
    default:
        	break;
 800084a:	bf00      	nop
    }
    digit_index++;
 800084c:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <display2number+0x18c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	3301      	adds	r3, #1
 8000852:	4a0c      	ldr	r2, [pc, #48]	; (8000884 <display2number+0x18c>)
 8000854:	6013      	str	r3, [r2, #0]
	if (digit_index >4) digit_index=0;
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <display2number+0x18c>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b04      	cmp	r3, #4
 800085c:	dd02      	ble.n	8000864 <display2number+0x16c>
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <display2number+0x18c>)
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	66666667 	.word	0x66666667
 8000870:	20000070 	.word	0x20000070
 8000874:	20000071 	.word	0x20000071
 8000878:	20000072 	.word	0x20000072
 800087c:	20000073 	.word	0x20000073
 8000880:	40010c00 	.word	0x40010c00
 8000884:	2000006c 	.word	0x2000006c
 8000888:	20000004 	.word	0x20000004

0800088c <timeledlight>:

int new_red_duration = 0;
int new_yellow_duration = 0;
int new_green_duration = 0;

void timeledlight(){
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
	display2number(num11, num22);
 8000890:	4b04      	ldr	r3, [pc, #16]	; (80008a4 <timeledlight+0x18>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a04      	ldr	r2, [pc, #16]	; (80008a8 <timeledlight+0x1c>)
 8000896:	6812      	ldr	r2, [r2, #0]
 8000898:	4611      	mov	r1, r2
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff ff2c 	bl	80006f8 <display2number>
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000074 	.word	0x20000074
 80008a8:	20000078 	.word	0x20000078

080008ac <normalstate>:
void normalstate(){
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10 | GPIO_PIN_13 | GPIO_PIN_11 | GPIO_PIN_14, GPIO_PIN_RESET);
 80008b0:	2200      	movs	r2, #0
 80008b2:	f44f 41d8 	mov.w	r1, #27648	; 0x6c00
 80008b6:	4873      	ldr	r0, [pc, #460]	; (8000a84 <normalstate+0x1d8>)
 80008b8:	f000 ff73 	bl	80017a2 <HAL_GPIO_WritePin>

	if (cntred >= 0) {
 80008bc:	4b72      	ldr	r3, [pc, #456]	; (8000a88 <normalstate+0x1dc>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	db19      	blt.n	80008f8 <normalstate+0x4c>
		num11=cntred--;
 80008c4:	4b70      	ldr	r3, [pc, #448]	; (8000a88 <normalstate+0x1dc>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	1e5a      	subs	r2, r3, #1
 80008ca:	496f      	ldr	r1, [pc, #444]	; (8000a88 <normalstate+0x1dc>)
 80008cc:	600a      	str	r2, [r1, #0]
 80008ce:	4a6f      	ldr	r2, [pc, #444]	; (8000a8c <normalstate+0x1e0>)
 80008d0:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOB, red2_Pin, GPIO_PIN_SET);
 80008d2:	2201      	movs	r2, #1
 80008d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008d8:	486a      	ldr	r0, [pc, #424]	; (8000a84 <normalstate+0x1d8>)
 80008da:	f000 ff62 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, yellow2_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008e4:	4867      	ldr	r0, [pc, #412]	; (8000a84 <normalstate+0x1d8>)
 80008e6:	f000 ff5c 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, green2_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008f0:	4864      	ldr	r0, [pc, #400]	; (8000a84 <normalstate+0x1d8>)
 80008f2:	f000 ff56 	bl	80017a2 <HAL_GPIO_WritePin>
 80008f6:	e03a      	b.n	800096e <normalstate+0xc2>
	}
	else if (cntgr >= 0)  	{
 80008f8:	4b65      	ldr	r3, [pc, #404]	; (8000a90 <normalstate+0x1e4>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	db19      	blt.n	8000934 <normalstate+0x88>
		HAL_GPIO_WritePin(GPIOB, green2_Pin, GPIO_PIN_SET);
 8000900:	2201      	movs	r2, #1
 8000902:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000906:	485f      	ldr	r0, [pc, #380]	; (8000a84 <normalstate+0x1d8>)
 8000908:	f000 ff4b 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, red2_Pin, GPIO_PIN_RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000912:	485c      	ldr	r0, [pc, #368]	; (8000a84 <normalstate+0x1d8>)
 8000914:	f000 ff45 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, yellow2_Pin, GPIO_PIN_RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800091e:	4859      	ldr	r0, [pc, #356]	; (8000a84 <normalstate+0x1d8>)
 8000920:	f000 ff3f 	bl	80017a2 <HAL_GPIO_WritePin>

		num11=cntgr--;
 8000924:	4b5a      	ldr	r3, [pc, #360]	; (8000a90 <normalstate+0x1e4>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	1e5a      	subs	r2, r3, #1
 800092a:	4959      	ldr	r1, [pc, #356]	; (8000a90 <normalstate+0x1e4>)
 800092c:	600a      	str	r2, [r1, #0]
 800092e:	4a57      	ldr	r2, [pc, #348]	; (8000a8c <normalstate+0x1e0>)
 8000930:	6013      	str	r3, [r2, #0]
 8000932:	e01c      	b.n	800096e <normalstate+0xc2>
	}
	else if (cntye >= 0) 	{
 8000934:	4b57      	ldr	r3, [pc, #348]	; (8000a94 <normalstate+0x1e8>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	db18      	blt.n	800096e <normalstate+0xc2>
		num11=cntye--;
 800093c:	4b55      	ldr	r3, [pc, #340]	; (8000a94 <normalstate+0x1e8>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	1e5a      	subs	r2, r3, #1
 8000942:	4954      	ldr	r1, [pc, #336]	; (8000a94 <normalstate+0x1e8>)
 8000944:	600a      	str	r2, [r1, #0]
 8000946:	4a51      	ldr	r2, [pc, #324]	; (8000a8c <normalstate+0x1e0>)
 8000948:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOB, yellow2_Pin, GPIO_PIN_SET);
 800094a:	2201      	movs	r2, #1
 800094c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000950:	484c      	ldr	r0, [pc, #304]	; (8000a84 <normalstate+0x1d8>)
 8000952:	f000 ff26 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, red2_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800095c:	4849      	ldr	r0, [pc, #292]	; (8000a84 <normalstate+0x1d8>)
 800095e:	f000 ff20 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, green2_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000968:	4846      	ldr	r0, [pc, #280]	; (8000a84 <normalstate+0x1d8>)
 800096a:	f000 ff1a 	bl	80017a2 <HAL_GPIO_WritePin>

	}

	if (cntgr2 >= 0)  	{
 800096e:	4b4a      	ldr	r3, [pc, #296]	; (8000a98 <normalstate+0x1ec>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	db19      	blt.n	80009aa <normalstate+0xfe>
		num22=cntgr2--;
 8000976:	4b48      	ldr	r3, [pc, #288]	; (8000a98 <normalstate+0x1ec>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	1e5a      	subs	r2, r3, #1
 800097c:	4946      	ldr	r1, [pc, #280]	; (8000a98 <normalstate+0x1ec>)
 800097e:	600a      	str	r2, [r1, #0]
 8000980:	4a46      	ldr	r2, [pc, #280]	; (8000a9c <normalstate+0x1f0>)
 8000982:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOB, green1_Pin, GPIO_PIN_SET);  // Bật đèn xanh
 8000984:	2201      	movs	r2, #1
 8000986:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800098a:	483e      	ldr	r0, [pc, #248]	; (8000a84 <normalstate+0x1d8>)
 800098c:	f000 ff09 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, red1_Pin, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000996:	483b      	ldr	r0, [pc, #236]	; (8000a84 <normalstate+0x1d8>)
 8000998:	f000 ff03 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, yellow1_Pin, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009a2:	4838      	ldr	r0, [pc, #224]	; (8000a84 <normalstate+0x1d8>)
 80009a4:	f000 fefd 	bl	80017a2 <HAL_GPIO_WritePin>
 80009a8:	e03a      	b.n	8000a20 <normalstate+0x174>
	}
	else if (cntye2 >= 0) 	{
 80009aa:	4b3d      	ldr	r3, [pc, #244]	; (8000aa0 <normalstate+0x1f4>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	db19      	blt.n	80009e6 <normalstate+0x13a>
		num22=cntye2--;
 80009b2:	4b3b      	ldr	r3, [pc, #236]	; (8000aa0 <normalstate+0x1f4>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	1e5a      	subs	r2, r3, #1
 80009b8:	4939      	ldr	r1, [pc, #228]	; (8000aa0 <normalstate+0x1f4>)
 80009ba:	600a      	str	r2, [r1, #0]
 80009bc:	4a37      	ldr	r2, [pc, #220]	; (8000a9c <normalstate+0x1f0>)
 80009be:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOB, yellow1_Pin, GPIO_PIN_SET); // Bật đèn vàng
 80009c0:	2201      	movs	r2, #1
 80009c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009c6:	482f      	ldr	r0, [pc, #188]	; (8000a84 <normalstate+0x1d8>)
 80009c8:	f000 feeb 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, red1_Pin, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009d2:	482c      	ldr	r0, [pc, #176]	; (8000a84 <normalstate+0x1d8>)
 80009d4:	f000 fee5 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, green1_Pin, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009de:	4829      	ldr	r0, [pc, #164]	; (8000a84 <normalstate+0x1d8>)
 80009e0:	f000 fedf 	bl	80017a2 <HAL_GPIO_WritePin>
 80009e4:	e01c      	b.n	8000a20 <normalstate+0x174>
	}
	else if (cntred2 >= 0) 	{
 80009e6:	4b2f      	ldr	r3, [pc, #188]	; (8000aa4 <normalstate+0x1f8>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	db18      	blt.n	8000a20 <normalstate+0x174>
		num22=cntred2--;
 80009ee:	4b2d      	ldr	r3, [pc, #180]	; (8000aa4 <normalstate+0x1f8>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	1e5a      	subs	r2, r3, #1
 80009f4:	492b      	ldr	r1, [pc, #172]	; (8000aa4 <normalstate+0x1f8>)
 80009f6:	600a      	str	r2, [r1, #0]
 80009f8:	4a28      	ldr	r2, [pc, #160]	; (8000a9c <normalstate+0x1f0>)
 80009fa:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOB, red1_Pin, GPIO_PIN_SET);   // Bật đèn đ�?
 80009fc:	2201      	movs	r2, #1
 80009fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a02:	4820      	ldr	r0, [pc, #128]	; (8000a84 <normalstate+0x1d8>)
 8000a04:	f000 fecd 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, yellow1_Pin, GPIO_PIN_RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a0e:	481d      	ldr	r0, [pc, #116]	; (8000a84 <normalstate+0x1d8>)
 8000a10:	f000 fec7 	bl	80017a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, green1_Pin, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a1a:	481a      	ldr	r0, [pc, #104]	; (8000a84 <normalstate+0x1d8>)
 8000a1c:	f000 fec1 	bl	80017a2 <HAL_GPIO_WritePin>
	}

	if (cntred2 < 0 && cntgr2 < 0 && cntye2 < 0) {
 8000a20:	4b20      	ldr	r3, [pc, #128]	; (8000aa4 <normalstate+0x1f8>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	da13      	bge.n	8000a50 <normalstate+0x1a4>
 8000a28:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <normalstate+0x1ec>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	da0f      	bge.n	8000a50 <normalstate+0x1a4>
 8000a30:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <normalstate+0x1f4>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	da0b      	bge.n	8000a50 <normalstate+0x1a4>
		cntred2 = red_duration;
 8000a38:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <normalstate+0x1fc>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a19      	ldr	r2, [pc, #100]	; (8000aa4 <normalstate+0x1f8>)
 8000a3e:	6013      	str	r3, [r2, #0]
		cntgr2 = green_duration ;
 8000a40:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <normalstate+0x200>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a14      	ldr	r2, [pc, #80]	; (8000a98 <normalstate+0x1ec>)
 8000a46:	6013      	str	r3, [r2, #0]
		cntye2 = yellow_duration;
 8000a48:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <normalstate+0x204>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a14      	ldr	r2, [pc, #80]	; (8000aa0 <normalstate+0x1f4>)
 8000a4e:	6013      	str	r3, [r2, #0]
	}

	if (cntred < 0 && cntgr < 0 && cntye < 0) {
 8000a50:	4b0d      	ldr	r3, [pc, #52]	; (8000a88 <normalstate+0x1dc>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	da13      	bge.n	8000a80 <normalstate+0x1d4>
 8000a58:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <normalstate+0x1e4>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	da0f      	bge.n	8000a80 <normalstate+0x1d4>
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <normalstate+0x1e8>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	da0b      	bge.n	8000a80 <normalstate+0x1d4>
		cntred = red_duration;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <normalstate+0x1fc>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a06      	ldr	r2, [pc, #24]	; (8000a88 <normalstate+0x1dc>)
 8000a6e:	6013      	str	r3, [r2, #0]
		cntgr = green_duration ;
 8000a70:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <normalstate+0x200>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a06      	ldr	r2, [pc, #24]	; (8000a90 <normalstate+0x1e4>)
 8000a76:	6013      	str	r3, [r2, #0]
		cntye = yellow_duration;
 8000a78:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <normalstate+0x204>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a05      	ldr	r2, [pc, #20]	; (8000a94 <normalstate+0x1e8>)
 8000a7e:	6013      	str	r3, [r2, #0]
	}
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40010c00 	.word	0x40010c00
 8000a88:	20000008 	.word	0x20000008
 8000a8c:	20000074 	.word	0x20000074
 8000a90:	20000010 	.word	0x20000010
 8000a94:	2000000c 	.word	0x2000000c
 8000a98:	2000001c 	.word	0x2000001c
 8000a9c:	20000078 	.word	0x20000078
 8000aa0:	20000018 	.word	0x20000018
 8000aa4:	20000014 	.word	0x20000014
 8000aa8:	20000020 	.word	0x20000020
 8000aac:	20000028 	.word	0x20000028
 8000ab0:	20000024 	.word	0x20000024

08000ab4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */
//void led1_test(){
//	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
//}
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
//	if (htim->Instance == TIM2){
//	        timerRun();
//	    }
	//if (htim->Instance == TIM2) {
	        SCH_Update();
 8000abc:	f000 f9cc 	bl	8000e58 <SCH_Update>
	   // }
	}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000acc:	f000 fb66 	bl	800119c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ad0:	f000 f824 	bl	8000b1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad4:	f000 f8aa 	bl	8000c2c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000ad8:	f000 f85c 	bl	8000b94 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim2);
 8000adc:	480b      	ldr	r0, [pc, #44]	; (8000b0c <main+0x44>)
 8000ade:	f001 fabf 	bl	8002060 <HAL_TIM_Base_Start_IT>
  SCH_Init();
 8000ae2:	f000 f90d 	bl	8000d00 <SCH_Init>
  //SCH_Add_Task(led1_test, 1, 1000);
  SCH_Add_Task(timeledlight, 0, 10);
 8000ae6:	220a      	movs	r2, #10
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4809      	ldr	r0, [pc, #36]	; (8000b10 <main+0x48>)
 8000aec:	f000 f952 	bl	8000d94 <SCH_Add_Task>
  SCH_Add_Task(button_reading, 1, 10);
 8000af0:	220a      	movs	r2, #10
 8000af2:	2101      	movs	r1, #1
 8000af4:	4807      	ldr	r0, [pc, #28]	; (8000b14 <main+0x4c>)
 8000af6:	f000 f94d 	bl	8000d94 <SCH_Add_Task>
  SCH_Add_Task(handle_mode, 3, 500);
 8000afa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000afe:	2103      	movs	r1, #3
 8000b00:	4805      	ldr	r0, [pc, #20]	; (8000b18 <main+0x50>)
 8000b02:	f000 f947 	bl	8000d94 <SCH_Add_Task>
 // SCH_Add_Task(timeledlight, 500, 500);

  while (1)
  {
	  SCH_Dispatch_Tasks();
 8000b06:	f000 fa03 	bl	8000f10 <SCH_Dispatch_Tasks>
 8000b0a:	e7fc      	b.n	8000b06 <main+0x3e>
 8000b0c:	2000007c 	.word	0x2000007c
 8000b10:	0800088d 	.word	0x0800088d
 8000b14:	080001a5 	.word	0x080001a5
 8000b18:	0800014d 	.word	0x0800014d

08000b1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b090      	sub	sp, #64	; 0x40
 8000b20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b22:	f107 0318 	add.w	r3, r7, #24
 8000b26:	2228      	movs	r2, #40	; 0x28
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f001 fe48 	bl	80027c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
 8000b3c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b42:	2301      	movs	r3, #1
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b46:	2310      	movs	r3, #16
 8000b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b4e:	f107 0318 	add.w	r3, r7, #24
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 fe56 	bl	8001804 <HAL_RCC_OscConfig>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000b5e:	f000 f8c9 	bl	8000cf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b62:	230f      	movs	r3, #15
 8000b64:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f001 f8c4 	bl	8001d08 <HAL_RCC_ClockConfig>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b86:	f000 f8b5 	bl	8000cf4 <Error_Handler>
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	3740      	adds	r7, #64	; 0x40
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b9a:	f107 0308 	add.w	r3, r7, #8
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba8:	463b      	mov	r3, r7
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bb0:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <MX_TIM2_Init+0x94>)
 8000bb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bb6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <MX_TIM2_Init+0x94>)
 8000bba:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000bbe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc0:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <MX_TIM2_Init+0x94>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000bc6:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <MX_TIM2_Init+0x94>)
 8000bc8:	2209      	movs	r2, #9
 8000bca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bcc:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <MX_TIM2_Init+0x94>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <MX_TIM2_Init+0x94>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bd8:	4813      	ldr	r0, [pc, #76]	; (8000c28 <MX_TIM2_Init+0x94>)
 8000bda:	f001 f9f1 	bl	8001fc0 <HAL_TIM_Base_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000be4:	f000 f886 	bl	8000cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000be8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bee:	f107 0308 	add.w	r3, r7, #8
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	480c      	ldr	r0, [pc, #48]	; (8000c28 <MX_TIM2_Init+0x94>)
 8000bf6:	f001 fb6f 	bl	80022d8 <HAL_TIM_ConfigClockSource>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c00:	f000 f878 	bl	8000cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c04:	2300      	movs	r3, #0
 8000c06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c0c:	463b      	mov	r3, r7
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4805      	ldr	r0, [pc, #20]	; (8000c28 <MX_TIM2_Init+0x94>)
 8000c12:	f001 fd47 	bl	80026a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c1c:	f000 f86a 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	2000007c 	.word	0x2000007c

08000c2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c32:	f107 0308 	add.w	r3, r7, #8
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c40:	4b29      	ldr	r3, [pc, #164]	; (8000ce8 <MX_GPIO_Init+0xbc>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	4a28      	ldr	r2, [pc, #160]	; (8000ce8 <MX_GPIO_Init+0xbc>)
 8000c46:	f043 0304 	orr.w	r3, r3, #4
 8000c4a:	6193      	str	r3, [r2, #24]
 8000c4c:	4b26      	ldr	r3, [pc, #152]	; (8000ce8 <MX_GPIO_Init+0xbc>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	f003 0304 	and.w	r3, r3, #4
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c58:	4b23      	ldr	r3, [pc, #140]	; (8000ce8 <MX_GPIO_Init+0xbc>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	4a22      	ldr	r2, [pc, #136]	; (8000ce8 <MX_GPIO_Init+0xbc>)
 8000c5e:	f043 0308 	orr.w	r3, r3, #8
 8000c62:	6193      	str	r3, [r2, #24]
 8000c64:	4b20      	ldr	r3, [pc, #128]	; (8000ce8 <MX_GPIO_Init+0xbc>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	f003 0308 	and.w	r3, r3, #8
 8000c6c:	603b      	str	r3, [r7, #0]
 8000c6e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
 8000c70:	2200      	movs	r2, #0
 8000c72:	f240 117f 	movw	r1, #383	; 0x17f
 8000c76:	481d      	ldr	r0, [pc, #116]	; (8000cec <MX_GPIO_Init+0xc0>)
 8000c78:	f000 fd93 	bl	80017a2 <HAL_GPIO_WritePin>
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, red1_Pin|yellow1_Pin|green1_Pin|red2_Pin
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f64f 41f8 	movw	r1, #64760	; 0xfcf8
 8000c82:	481b      	ldr	r0, [pc, #108]	; (8000cf0 <MX_GPIO_Init+0xc4>)
 8000c84:	f000 fd8d 	bl	80017a2 <HAL_GPIO_WritePin>
                          |yellow2_Pin|green2_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin|EN4_Pin|mode_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEG_0_Pin SEG_1_Pin SEG_2_Pin SEG_3_Pin
                           SEG_4_Pin SEG_5_Pin SEG_6_Pin PA8 */
  GPIO_InitStruct.Pin = SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
 8000c88:	f240 137f 	movw	r3, #383	; 0x17f
 8000c8c:	60bb      	str	r3, [r7, #8]
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2302      	movs	r3, #2
 8000c98:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9a:	f107 0308 	add.w	r3, r7, #8
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4812      	ldr	r0, [pc, #72]	; (8000cec <MX_GPIO_Init+0xc0>)
 8000ca2:	f000 fbeb 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin BUTTON_4_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin|BUTTON_4_Pin;
 8000ca6:	f240 1307 	movw	r3, #263	; 0x107
 8000caa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cac:	2300      	movs	r3, #0
 8000cae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb4:	f107 0308 	add.w	r3, r7, #8
 8000cb8:	4619      	mov	r1, r3
 8000cba:	480d      	ldr	r0, [pc, #52]	; (8000cf0 <MX_GPIO_Init+0xc4>)
 8000cbc:	f000 fbde 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pins : red1_Pin yellow1_Pin green1_Pin red2_Pin
                           yellow2_Pin green2_Pin EN1_Pin EN2_Pin
                           EN3_Pin EN4_Pin mode_Pin */
  GPIO_InitStruct.Pin = red1_Pin|yellow1_Pin|green1_Pin|red2_Pin
 8000cc0:	f64f 43f8 	movw	r3, #64760	; 0xfcf8
 8000cc4:	60bb      	str	r3, [r7, #8]
                          |yellow2_Pin|green2_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin|EN4_Pin|mode_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd2:	f107 0308 	add.w	r3, r7, #8
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <MX_GPIO_Init+0xc4>)
 8000cda:	f000 fbcf 	bl	800147c <HAL_GPIO_Init>

}
 8000cde:	bf00      	nop
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	40010800 	.word	0x40010800
 8000cf0:	40010c00 	.word	0x40010c00

08000cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf8:	b672      	cpsid	i
}
 8000cfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <Error_Handler+0x8>
	...

08000d00 <SCH_Init>:

sTasks SCH_tasks_G[SCH_MAX_TASKS];

uint8_t current_index_task = 0;

void SCH_Init(void){
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
	current_index_task=0;
 8000d06:	4b21      	ldr	r3, [pc, #132]	; (8000d8c <SCH_Init+0x8c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < SCH_MAX_TASKS; i++) {
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	71fb      	strb	r3, [r7, #7]
 8000d10:	e033      	b.n	8000d7a <SCH_Init+0x7a>
	        SCH_tasks_G[i].pTask = 0;
 8000d12:	79fa      	ldrb	r2, [r7, #7]
 8000d14:	491e      	ldr	r1, [pc, #120]	; (8000d90 <SCH_Init+0x90>)
 8000d16:	4613      	mov	r3, r2
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	4413      	add	r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	440b      	add	r3, r1
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
	        SCH_tasks_G[i].Delay = 0;
 8000d24:	79fa      	ldrb	r2, [r7, #7]
 8000d26:	491a      	ldr	r1, [pc, #104]	; (8000d90 <SCH_Init+0x90>)
 8000d28:	4613      	mov	r3, r2
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	4413      	add	r3, r2
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	440b      	add	r3, r1
 8000d32:	3304      	adds	r3, #4
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
	        SCH_tasks_G[i].Period = 0;
 8000d38:	79fa      	ldrb	r2, [r7, #7]
 8000d3a:	4915      	ldr	r1, [pc, #84]	; (8000d90 <SCH_Init+0x90>)
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	4413      	add	r3, r2
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	440b      	add	r3, r1
 8000d46:	3308      	adds	r3, #8
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
	        SCH_tasks_G[i].RunMe = 0;
 8000d4c:	79fa      	ldrb	r2, [r7, #7]
 8000d4e:	4910      	ldr	r1, [pc, #64]	; (8000d90 <SCH_Init+0x90>)
 8000d50:	4613      	mov	r3, r2
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	4413      	add	r3, r2
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	440b      	add	r3, r1
 8000d5a:	330c      	adds	r3, #12
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]
	        SCH_tasks_G[i].TaskID = 0xFF; // Assuming 0xFF means unused
 8000d60:	79fa      	ldrb	r2, [r7, #7]
 8000d62:	490b      	ldr	r1, [pc, #44]	; (8000d90 <SCH_Init+0x90>)
 8000d64:	4613      	mov	r3, r2
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	4413      	add	r3, r2
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	440b      	add	r3, r1
 8000d6e:	3310      	adds	r3, #16
 8000d70:	22ff      	movs	r2, #255	; 0xff
 8000d72:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < SCH_MAX_TASKS; i++) {
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	3301      	adds	r3, #1
 8000d78:	71fb      	strb	r3, [r7, #7]
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	2b27      	cmp	r3, #39	; 0x27
 8000d7e:	d9c8      	bls.n	8000d12 <SCH_Init+0x12>
	    }

}
 8000d80:	bf00      	nop
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr
 8000d8c:	200003e4 	.word	0x200003e4
 8000d90:	200000c4 	.word	0x200000c4

08000d94 <SCH_Add_Task>:

uint32_t SCH_Add_Task ( void (*pFunction)(),
					uint32_t DELAY,
					uint32_t PERIOD){
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
	if(current_index_task < SCH_MAX_TASKS){
 8000da0:	4b2a      	ldr	r3, [pc, #168]	; (8000e4c <SCH_Add_Task+0xb8>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b27      	cmp	r3, #39	; 0x27
 8000da6:	d84b      	bhi.n	8000e40 <SCH_Add_Task+0xac>
		SCH_tasks_G[current_index_task].pTask=pFunction;
 8000da8:	4b28      	ldr	r3, [pc, #160]	; (8000e4c <SCH_Add_Task+0xb8>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	4619      	mov	r1, r3
 8000dae:	4a28      	ldr	r2, [pc, #160]	; (8000e50 <SCH_Add_Task+0xbc>)
 8000db0:	460b      	mov	r3, r1
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	440b      	add	r3, r1
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	4413      	add	r3, r2
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Delay=DELAY/ TICK;
 8000dbe:	4b23      	ldr	r3, [pc, #140]	; (8000e4c <SCH_Add_Task+0xb8>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	4a23      	ldr	r2, [pc, #140]	; (8000e54 <SCH_Add_Task+0xc0>)
 8000dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dcc:	08da      	lsrs	r2, r3, #3
 8000dce:	4920      	ldr	r1, [pc, #128]	; (8000e50 <SCH_Add_Task+0xbc>)
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	4403      	add	r3, r0
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	440b      	add	r3, r1
 8000dda:	3304      	adds	r3, #4
 8000ddc:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Period=PERIOD/ TICK;
 8000dde:	4b1b      	ldr	r3, [pc, #108]	; (8000e4c <SCH_Add_Task+0xb8>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	4618      	mov	r0, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a1b      	ldr	r2, [pc, #108]	; (8000e54 <SCH_Add_Task+0xc0>)
 8000de8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dec:	08da      	lsrs	r2, r3, #3
 8000dee:	4918      	ldr	r1, [pc, #96]	; (8000e50 <SCH_Add_Task+0xbc>)
 8000df0:	4603      	mov	r3, r0
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	4403      	add	r3, r0
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	440b      	add	r3, r1
 8000dfa:	3308      	adds	r3, #8
 8000dfc:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].RunMe=0;
 8000dfe:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <SCH_Add_Task+0xb8>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	4619      	mov	r1, r3
 8000e04:	4a12      	ldr	r2, [pc, #72]	; (8000e50 <SCH_Add_Task+0xbc>)
 8000e06:	460b      	mov	r3, r1
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	440b      	add	r3, r1
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	4413      	add	r3, r2
 8000e10:	330c      	adds	r3, #12
 8000e12:	2200      	movs	r2, #0
 8000e14:	701a      	strb	r2, [r3, #0]

		SCH_tasks_G[current_index_task].TaskID=current_index_task;
 8000e16:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <SCH_Add_Task+0xb8>)
 8000e18:	781a      	ldrb	r2, [r3, #0]
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <SCH_Add_Task+0xb8>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4610      	mov	r0, r2
 8000e22:	4a0b      	ldr	r2, [pc, #44]	; (8000e50 <SCH_Add_Task+0xbc>)
 8000e24:	460b      	mov	r3, r1
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	440b      	add	r3, r1
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	4413      	add	r3, r2
 8000e2e:	3310      	adds	r3, #16
 8000e30:	6018      	str	r0, [r3, #0]

		return current_index_task++ ;
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <SCH_Add_Task+0xb8>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	1c5a      	adds	r2, r3, #1
 8000e38:	b2d1      	uxtb	r1, r2
 8000e3a:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <SCH_Add_Task+0xb8>)
 8000e3c:	7011      	strb	r1, [r2, #0]
 8000e3e:	e000      	b.n	8000e42 <SCH_Add_Task+0xae>
	}
	return SCH_MAX_TASKS;
 8000e40:	2328      	movs	r3, #40	; 0x28
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3714      	adds	r7, #20
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr
 8000e4c:	200003e4 	.word	0x200003e4
 8000e50:	200000c4 	.word	0x200000c4
 8000e54:	cccccccd 	.word	0xcccccccd

08000e58 <SCH_Update>:

void SCH_Update(void){
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
	for(uint8_t i=0;i<current_index_task;i++){
 8000e5e:	2300      	movs	r3, #0
 8000e60:	71fb      	strb	r3, [r7, #7]
 8000e62:	e046      	b.n	8000ef2 <SCH_Update+0x9a>
		if(SCH_tasks_G[i].Delay > 0)
 8000e64:	79fa      	ldrb	r2, [r7, #7]
 8000e66:	4928      	ldr	r1, [pc, #160]	; (8000f08 <SCH_Update+0xb0>)
 8000e68:	4613      	mov	r3, r2
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	4413      	add	r3, r2
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	440b      	add	r3, r1
 8000e72:	3304      	adds	r3, #4
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d012      	beq.n	8000ea0 <SCH_Update+0x48>
			SCH_tasks_G[i].Delay --;
 8000e7a:	79fa      	ldrb	r2, [r7, #7]
 8000e7c:	4922      	ldr	r1, [pc, #136]	; (8000f08 <SCH_Update+0xb0>)
 8000e7e:	4613      	mov	r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	4413      	add	r3, r2
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	440b      	add	r3, r1
 8000e88:	3304      	adds	r3, #4
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	1e59      	subs	r1, r3, #1
 8000e8e:	481e      	ldr	r0, [pc, #120]	; (8000f08 <SCH_Update+0xb0>)
 8000e90:	4613      	mov	r3, r2
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	4413      	add	r3, r2
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	4403      	add	r3, r0
 8000e9a:	3304      	adds	r3, #4
 8000e9c:	6019      	str	r1, [r3, #0]
 8000e9e:	e025      	b.n	8000eec <SCH_Update+0x94>
		else {
			SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 8000ea0:	79f9      	ldrb	r1, [r7, #7]
 8000ea2:	79fa      	ldrb	r2, [r7, #7]
 8000ea4:	4818      	ldr	r0, [pc, #96]	; (8000f08 <SCH_Update+0xb0>)
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	440b      	add	r3, r1
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	4403      	add	r3, r0
 8000eb0:	3308      	adds	r3, #8
 8000eb2:	6819      	ldr	r1, [r3, #0]
 8000eb4:	4814      	ldr	r0, [pc, #80]	; (8000f08 <SCH_Update+0xb0>)
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	4413      	add	r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	4403      	add	r3, r0
 8000ec0:	3304      	adds	r3, #4
 8000ec2:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].RunMe++;
 8000ec4:	79fa      	ldrb	r2, [r7, #7]
 8000ec6:	4910      	ldr	r1, [pc, #64]	; (8000f08 <SCH_Update+0xb0>)
 8000ec8:	4613      	mov	r3, r2
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	4413      	add	r3, r2
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	440b      	add	r3, r1
 8000ed2:	330c      	adds	r3, #12
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	b2d8      	uxtb	r0, r3
 8000eda:	490b      	ldr	r1, [pc, #44]	; (8000f08 <SCH_Update+0xb0>)
 8000edc:	4613      	mov	r3, r2
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	4413      	add	r3, r2
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	440b      	add	r3, r1
 8000ee6:	330c      	adds	r3, #12
 8000ee8:	4602      	mov	r2, r0
 8000eea:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0;i<current_index_task;i++){
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	71fb      	strb	r3, [r7, #7]
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <SCH_Update+0xb4>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	79fa      	ldrb	r2, [r7, #7]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d3b3      	bcc.n	8000e64 <SCH_Update+0xc>
		}
	}
}
 8000efc:	bf00      	nop
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	200000c4 	.word	0x200000c4
 8000f0c:	200003e4 	.word	0x200003e4

08000f10 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < current_index_task; i++) {
 8000f16:	2300      	movs	r3, #0
 8000f18:	71fb      	strb	r3, [r7, #7]
 8000f1a:	e041      	b.n	8000fa0 <SCH_Dispatch_Tasks+0x90>
		if (SCH_tasks_G[i].RunMe > 0) {
 8000f1c:	79fa      	ldrb	r2, [r7, #7]
 8000f1e:	4925      	ldr	r1, [pc, #148]	; (8000fb4 <SCH_Dispatch_Tasks+0xa4>)
 8000f20:	4613      	mov	r3, r2
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	4413      	add	r3, r2
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	440b      	add	r3, r1
 8000f2a:	330c      	adds	r3, #12
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d033      	beq.n	8000f9a <SCH_Dispatch_Tasks+0x8a>
			(*SCH_tasks_G[i].pTask)(); // Gọi task
 8000f32:	79fa      	ldrb	r2, [r7, #7]
 8000f34:	491f      	ldr	r1, [pc, #124]	; (8000fb4 <SCH_Dispatch_Tasks+0xa4>)
 8000f36:	4613      	mov	r3, r2
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	4413      	add	r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	440b      	add	r3, r1
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4798      	blx	r3
			SCH_tasks_G[i].RunMe--;
 8000f44:	79fa      	ldrb	r2, [r7, #7]
 8000f46:	491b      	ldr	r1, [pc, #108]	; (8000fb4 <SCH_Dispatch_Tasks+0xa4>)
 8000f48:	4613      	mov	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	4413      	add	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	440b      	add	r3, r1
 8000f52:	330c      	adds	r3, #12
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	b2d8      	uxtb	r0, r3
 8000f5a:	4916      	ldr	r1, [pc, #88]	; (8000fb4 <SCH_Dispatch_Tasks+0xa4>)
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	4413      	add	r3, r2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	440b      	add	r3, r1
 8000f66:	330c      	adds	r3, #12
 8000f68:	4602      	mov	r2, r0
 8000f6a:	701a      	strb	r2, [r3, #0]

			if (SCH_tasks_G[i].Period == 0) {
 8000f6c:	79fa      	ldrb	r2, [r7, #7]
 8000f6e:	4911      	ldr	r1, [pc, #68]	; (8000fb4 <SCH_Dispatch_Tasks+0xa4>)
 8000f70:	4613      	mov	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4413      	add	r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	440b      	add	r3, r1
 8000f7a:	3308      	adds	r3, #8
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d10b      	bne.n	8000f9a <SCH_Dispatch_Tasks+0x8a>
				SCH_Delete_Task(SCH_tasks_G[i].TaskID); 			}
 8000f82:	79fa      	ldrb	r2, [r7, #7]
 8000f84:	490b      	ldr	r1, [pc, #44]	; (8000fb4 <SCH_Dispatch_Tasks+0xa4>)
 8000f86:	4613      	mov	r3, r2
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	4413      	add	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	440b      	add	r3, r1
 8000f90:	3310      	adds	r3, #16
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f000 f811 	bl	8000fbc <SCH_Delete_Task>
	for (uint8_t i = 0; i < current_index_task; i++) {
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	71fb      	strb	r3, [r7, #7]
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <SCH_Dispatch_Tasks+0xa8>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	79fa      	ldrb	r2, [r7, #7]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d3b8      	bcc.n	8000f1c <SCH_Dispatch_Tasks+0xc>
		}
	}
}
 8000faa:	bf00      	nop
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	200000c4 	.word	0x200000c4
 8000fb8:	200003e4 	.word	0x200003e4

08000fbc <SCH_Delete_Task>:
uint8_t SCH_Delete_Task(uint32_t taskID) {
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
    if (taskID >= SCH_MAX_TASKS || SCH_tasks_G[taskID].pTask == 0) {
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b27      	cmp	r3, #39	; 0x27
 8000fc8:	d809      	bhi.n	8000fde <SCH_Delete_Task+0x22>
 8000fca:	4921      	ldr	r1, [pc, #132]	; (8001050 <SCH_Delete_Task+0x94>)
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	4413      	add	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	440b      	add	r3, r1
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d101      	bne.n	8000fe2 <SCH_Delete_Task+0x26>
        return 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e031      	b.n	8001046 <SCH_Delete_Task+0x8a>
    }

    SCH_tasks_G[taskID].pTask = 0;
 8000fe2:	491b      	ldr	r1, [pc, #108]	; (8001050 <SCH_Delete_Task+0x94>)
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	4413      	add	r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	440b      	add	r3, r1
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[taskID].Delay = 0;
 8000ff4:	4916      	ldr	r1, [pc, #88]	; (8001050 <SCH_Delete_Task+0x94>)
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	440b      	add	r3, r1
 8001002:	3304      	adds	r3, #4
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[taskID].Period = 0;
 8001008:	4911      	ldr	r1, [pc, #68]	; (8001050 <SCH_Delete_Task+0x94>)
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	4613      	mov	r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4413      	add	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	440b      	add	r3, r1
 8001016:	3308      	adds	r3, #8
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[taskID].RunMe = 0;
 800101c:	490c      	ldr	r1, [pc, #48]	; (8001050 <SCH_Delete_Task+0x94>)
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	4613      	mov	r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4413      	add	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	440b      	add	r3, r1
 800102a:	330c      	adds	r3, #12
 800102c:	2200      	movs	r2, #0
 800102e:	701a      	strb	r2, [r3, #0]
    SCH_tasks_G[taskID].TaskID = 0xFF;
 8001030:	4907      	ldr	r1, [pc, #28]	; (8001050 <SCH_Delete_Task+0x94>)
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	4613      	mov	r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	4413      	add	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	440b      	add	r3, r1
 800103e:	3310      	adds	r3, #16
 8001040:	22ff      	movs	r2, #255	; 0xff
 8001042:	601a      	str	r2, [r3, #0]
    return 1;
 8001044:	2301      	movs	r3, #1
}
 8001046:	4618      	mov	r0, r3
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr
 8001050:	200000c4 	.word	0x200000c4

08001054 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <HAL_MspInit+0x40>)
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	4a0d      	ldr	r2, [pc, #52]	; (8001094 <HAL_MspInit+0x40>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6193      	str	r3, [r2, #24]
 8001066:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <HAL_MspInit+0x40>)
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001072:	4b08      	ldr	r3, [pc, #32]	; (8001094 <HAL_MspInit+0x40>)
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	4a07      	ldr	r2, [pc, #28]	; (8001094 <HAL_MspInit+0x40>)
 8001078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800107c:	61d3      	str	r3, [r2, #28]
 800107e:	4b05      	ldr	r3, [pc, #20]	; (8001094 <HAL_MspInit+0x40>)
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr
 8001094:	40021000 	.word	0x40021000

08001098 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010a8:	d113      	bne.n	80010d2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010aa:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <HAL_TIM_Base_MspInit+0x44>)
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	4a0b      	ldr	r2, [pc, #44]	; (80010dc <HAL_TIM_Base_MspInit+0x44>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	61d3      	str	r3, [r2, #28]
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <HAL_TIM_Base_MspInit+0x44>)
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2100      	movs	r1, #0
 80010c6:	201c      	movs	r0, #28
 80010c8:	f000 f9a1 	bl	800140e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010cc:	201c      	movs	r0, #28
 80010ce:	f000 f9ba 	bl	8001446 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40021000 	.word	0x40021000

080010e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <NMI_Handler+0x4>

080010e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ea:	e7fe      	b.n	80010ea <HardFault_Handler+0x4>

080010ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <MemManage_Handler+0x4>

080010f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f6:	e7fe      	b.n	80010f6 <BusFault_Handler+0x4>

080010f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <UsageFault_Handler+0x4>

080010fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr

0800110a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr

08001116 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr

08001122 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001126:	f000 f87f 	bl	8001228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001134:	4802      	ldr	r0, [pc, #8]	; (8001140 <TIM2_IRQHandler+0x10>)
 8001136:	f000 ffdf 	bl	80020f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	2000007c 	.word	0x2000007c

08001144 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr

08001150 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001150:	f7ff fff8 	bl	8001144 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001154:	480b      	ldr	r0, [pc, #44]	; (8001184 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001156:	490c      	ldr	r1, [pc, #48]	; (8001188 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001158:	4a0c      	ldr	r2, [pc, #48]	; (800118c <LoopFillZerobss+0x16>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800115c:	e002      	b.n	8001164 <LoopCopyDataInit>

0800115e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001162:	3304      	adds	r3, #4

08001164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001168:	d3f9      	bcc.n	800115e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116a:	4a09      	ldr	r2, [pc, #36]	; (8001190 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800116c:	4c09      	ldr	r4, [pc, #36]	; (8001194 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001170:	e001      	b.n	8001176 <LoopFillZerobss>

08001172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001174:	3204      	adds	r2, #4

08001176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001178:	d3fb      	bcc.n	8001172 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800117a:	f001 fafd 	bl	8002778 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800117e:	f7ff fca3 	bl	8000ac8 <main>
  bx lr
 8001182:	4770      	bx	lr
  ldr r0, =_sdata
 8001184:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001188:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 800118c:	0800281c 	.word	0x0800281c
  ldr r2, =_sbss
 8001190:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8001194:	200003ec 	.word	0x200003ec

08001198 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001198:	e7fe      	b.n	8001198 <ADC1_2_IRQHandler>
	...

0800119c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <HAL_Init+0x28>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a07      	ldr	r2, [pc, #28]	; (80011c4 <HAL_Init+0x28>)
 80011a6:	f043 0310 	orr.w	r3, r3, #16
 80011aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ac:	2003      	movs	r0, #3
 80011ae:	f000 f923 	bl	80013f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011b2:	200f      	movs	r0, #15
 80011b4:	f000 f808 	bl	80011c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b8:	f7ff ff4c 	bl	8001054 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40022000 	.word	0x40022000

080011c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <HAL_InitTick+0x54>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <HAL_InitTick+0x58>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	4619      	mov	r1, r3
 80011da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011de:	fbb3 f3f1 	udiv	r3, r3, r1
 80011e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 f93b 	bl	8001462 <HAL_SYSTICK_Config>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e00e      	b.n	8001214 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2b0f      	cmp	r3, #15
 80011fa:	d80a      	bhi.n	8001212 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011fc:	2200      	movs	r2, #0
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	f04f 30ff 	mov.w	r0, #4294967295
 8001204:	f000 f903 	bl	800140e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001208:	4a06      	ldr	r2, [pc, #24]	; (8001224 <HAL_InitTick+0x5c>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800120e:	2300      	movs	r3, #0
 8001210:	e000      	b.n	8001214 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
}
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	2000002c 	.word	0x2000002c
 8001220:	20000034 	.word	0x20000034
 8001224:	20000030 	.word	0x20000030

08001228 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <HAL_IncTick+0x1c>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	4b05      	ldr	r3, [pc, #20]	; (8001248 <HAL_IncTick+0x20>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4413      	add	r3, r2
 8001238:	4a03      	ldr	r2, [pc, #12]	; (8001248 <HAL_IncTick+0x20>)
 800123a:	6013      	str	r3, [r2, #0]
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr
 8001244:	20000034 	.word	0x20000034
 8001248:	200003e8 	.word	0x200003e8

0800124c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return uwTick;
 8001250:	4b02      	ldr	r3, [pc, #8]	; (800125c <HAL_GetTick+0x10>)
 8001252:	681b      	ldr	r3, [r3, #0]
}
 8001254:	4618      	mov	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr
 800125c:	200003e8 	.word	0x200003e8

08001260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001276:	68ba      	ldr	r2, [r7, #8]
 8001278:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800127c:	4013      	ands	r3, r2
 800127e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001288:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800128c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001292:	4a04      	ldr	r2, [pc, #16]	; (80012a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	60d3      	str	r3, [r2, #12]
}
 8001298:	bf00      	nop
 800129a:	3714      	adds	r7, #20
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ac:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <__NVIC_GetPriorityGrouping+0x18>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	0a1b      	lsrs	r3, r3, #8
 80012b2:	f003 0307 	and.w	r3, r3, #7
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	db0b      	blt.n	80012ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	f003 021f 	and.w	r2, r3, #31
 80012dc:	4906      	ldr	r1, [pc, #24]	; (80012f8 <__NVIC_EnableIRQ+0x34>)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	095b      	lsrs	r3, r3, #5
 80012e4:	2001      	movs	r0, #1
 80012e6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	e000e100 	.word	0xe000e100

080012fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	6039      	str	r1, [r7, #0]
 8001306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130c:	2b00      	cmp	r3, #0
 800130e:	db0a      	blt.n	8001326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	b2da      	uxtb	r2, r3
 8001314:	490c      	ldr	r1, [pc, #48]	; (8001348 <__NVIC_SetPriority+0x4c>)
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	0112      	lsls	r2, r2, #4
 800131c:	b2d2      	uxtb	r2, r2
 800131e:	440b      	add	r3, r1
 8001320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001324:	e00a      	b.n	800133c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4908      	ldr	r1, [pc, #32]	; (800134c <__NVIC_SetPriority+0x50>)
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	f003 030f 	and.w	r3, r3, #15
 8001332:	3b04      	subs	r3, #4
 8001334:	0112      	lsls	r2, r2, #4
 8001336:	b2d2      	uxtb	r2, r2
 8001338:	440b      	add	r3, r1
 800133a:	761a      	strb	r2, [r3, #24]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000e100 	.word	0xe000e100
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001350:	b480      	push	{r7}
 8001352:	b089      	sub	sp, #36	; 0x24
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	f1c3 0307 	rsb	r3, r3, #7
 800136a:	2b04      	cmp	r3, #4
 800136c:	bf28      	it	cs
 800136e:	2304      	movcs	r3, #4
 8001370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3304      	adds	r3, #4
 8001376:	2b06      	cmp	r3, #6
 8001378:	d902      	bls.n	8001380 <NVIC_EncodePriority+0x30>
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3b03      	subs	r3, #3
 800137e:	e000      	b.n	8001382 <NVIC_EncodePriority+0x32>
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001384:	f04f 32ff 	mov.w	r2, #4294967295
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43da      	mvns	r2, r3
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	401a      	ands	r2, r3
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001398:	f04f 31ff 	mov.w	r1, #4294967295
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	fa01 f303 	lsl.w	r3, r1, r3
 80013a2:	43d9      	mvns	r1, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	4313      	orrs	r3, r2
         );
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3724      	adds	r7, #36	; 0x24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3b01      	subs	r3, #1
 80013c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013c4:	d301      	bcc.n	80013ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013c6:	2301      	movs	r3, #1
 80013c8:	e00f      	b.n	80013ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ca:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <SysTick_Config+0x40>)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013d2:	210f      	movs	r1, #15
 80013d4:	f04f 30ff 	mov.w	r0, #4294967295
 80013d8:	f7ff ff90 	bl	80012fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <SysTick_Config+0x40>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013e2:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <SysTick_Config+0x40>)
 80013e4:	2207      	movs	r2, #7
 80013e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	e000e010 	.word	0xe000e010

080013f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f7ff ff2d 	bl	8001260 <__NVIC_SetPriorityGrouping>
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800140e:	b580      	push	{r7, lr}
 8001410:	b086      	sub	sp, #24
 8001412:	af00      	add	r7, sp, #0
 8001414:	4603      	mov	r3, r0
 8001416:	60b9      	str	r1, [r7, #8]
 8001418:	607a      	str	r2, [r7, #4]
 800141a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001420:	f7ff ff42 	bl	80012a8 <__NVIC_GetPriorityGrouping>
 8001424:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	68b9      	ldr	r1, [r7, #8]
 800142a:	6978      	ldr	r0, [r7, #20]
 800142c:	f7ff ff90 	bl	8001350 <NVIC_EncodePriority>
 8001430:	4602      	mov	r2, r0
 8001432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001436:	4611      	mov	r1, r2
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff5f 	bl	80012fc <__NVIC_SetPriority>
}
 800143e:	bf00      	nop
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	4603      	mov	r3, r0
 800144e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff35 	bl	80012c4 <__NVIC_EnableIRQ>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff ffa2 	bl	80013b4 <SysTick_Config>
 8001470:	4603      	mov	r3, r0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800147c:	b480      	push	{r7}
 800147e:	b08b      	sub	sp, #44	; 0x2c
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001486:	2300      	movs	r3, #0
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800148a:	2300      	movs	r3, #0
 800148c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800148e:	e161      	b.n	8001754 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001490:	2201      	movs	r2, #1
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	69fa      	ldr	r2, [r7, #28]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	f040 8150 	bne.w	800174e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	4a97      	ldr	r2, [pc, #604]	; (8001710 <HAL_GPIO_Init+0x294>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d05e      	beq.n	8001576 <HAL_GPIO_Init+0xfa>
 80014b8:	4a95      	ldr	r2, [pc, #596]	; (8001710 <HAL_GPIO_Init+0x294>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d875      	bhi.n	80015aa <HAL_GPIO_Init+0x12e>
 80014be:	4a95      	ldr	r2, [pc, #596]	; (8001714 <HAL_GPIO_Init+0x298>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d058      	beq.n	8001576 <HAL_GPIO_Init+0xfa>
 80014c4:	4a93      	ldr	r2, [pc, #588]	; (8001714 <HAL_GPIO_Init+0x298>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d86f      	bhi.n	80015aa <HAL_GPIO_Init+0x12e>
 80014ca:	4a93      	ldr	r2, [pc, #588]	; (8001718 <HAL_GPIO_Init+0x29c>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d052      	beq.n	8001576 <HAL_GPIO_Init+0xfa>
 80014d0:	4a91      	ldr	r2, [pc, #580]	; (8001718 <HAL_GPIO_Init+0x29c>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d869      	bhi.n	80015aa <HAL_GPIO_Init+0x12e>
 80014d6:	4a91      	ldr	r2, [pc, #580]	; (800171c <HAL_GPIO_Init+0x2a0>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d04c      	beq.n	8001576 <HAL_GPIO_Init+0xfa>
 80014dc:	4a8f      	ldr	r2, [pc, #572]	; (800171c <HAL_GPIO_Init+0x2a0>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d863      	bhi.n	80015aa <HAL_GPIO_Init+0x12e>
 80014e2:	4a8f      	ldr	r2, [pc, #572]	; (8001720 <HAL_GPIO_Init+0x2a4>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d046      	beq.n	8001576 <HAL_GPIO_Init+0xfa>
 80014e8:	4a8d      	ldr	r2, [pc, #564]	; (8001720 <HAL_GPIO_Init+0x2a4>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d85d      	bhi.n	80015aa <HAL_GPIO_Init+0x12e>
 80014ee:	2b12      	cmp	r3, #18
 80014f0:	d82a      	bhi.n	8001548 <HAL_GPIO_Init+0xcc>
 80014f2:	2b12      	cmp	r3, #18
 80014f4:	d859      	bhi.n	80015aa <HAL_GPIO_Init+0x12e>
 80014f6:	a201      	add	r2, pc, #4	; (adr r2, 80014fc <HAL_GPIO_Init+0x80>)
 80014f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014fc:	08001577 	.word	0x08001577
 8001500:	08001551 	.word	0x08001551
 8001504:	08001563 	.word	0x08001563
 8001508:	080015a5 	.word	0x080015a5
 800150c:	080015ab 	.word	0x080015ab
 8001510:	080015ab 	.word	0x080015ab
 8001514:	080015ab 	.word	0x080015ab
 8001518:	080015ab 	.word	0x080015ab
 800151c:	080015ab 	.word	0x080015ab
 8001520:	080015ab 	.word	0x080015ab
 8001524:	080015ab 	.word	0x080015ab
 8001528:	080015ab 	.word	0x080015ab
 800152c:	080015ab 	.word	0x080015ab
 8001530:	080015ab 	.word	0x080015ab
 8001534:	080015ab 	.word	0x080015ab
 8001538:	080015ab 	.word	0x080015ab
 800153c:	080015ab 	.word	0x080015ab
 8001540:	08001559 	.word	0x08001559
 8001544:	0800156d 	.word	0x0800156d
 8001548:	4a76      	ldr	r2, [pc, #472]	; (8001724 <HAL_GPIO_Init+0x2a8>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d013      	beq.n	8001576 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800154e:	e02c      	b.n	80015aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	623b      	str	r3, [r7, #32]
          break;
 8001556:	e029      	b.n	80015ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	3304      	adds	r3, #4
 800155e:	623b      	str	r3, [r7, #32]
          break;
 8001560:	e024      	b.n	80015ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	3308      	adds	r3, #8
 8001568:	623b      	str	r3, [r7, #32]
          break;
 800156a:	e01f      	b.n	80015ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	330c      	adds	r3, #12
 8001572:	623b      	str	r3, [r7, #32]
          break;
 8001574:	e01a      	b.n	80015ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d102      	bne.n	8001584 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800157e:	2304      	movs	r3, #4
 8001580:	623b      	str	r3, [r7, #32]
          break;
 8001582:	e013      	b.n	80015ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d105      	bne.n	8001598 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800158c:	2308      	movs	r3, #8
 800158e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69fa      	ldr	r2, [r7, #28]
 8001594:	611a      	str	r2, [r3, #16]
          break;
 8001596:	e009      	b.n	80015ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001598:	2308      	movs	r3, #8
 800159a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	69fa      	ldr	r2, [r7, #28]
 80015a0:	615a      	str	r2, [r3, #20]
          break;
 80015a2:	e003      	b.n	80015ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015a4:	2300      	movs	r3, #0
 80015a6:	623b      	str	r3, [r7, #32]
          break;
 80015a8:	e000      	b.n	80015ac <HAL_GPIO_Init+0x130>
          break;
 80015aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	2bff      	cmp	r3, #255	; 0xff
 80015b0:	d801      	bhi.n	80015b6 <HAL_GPIO_Init+0x13a>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	e001      	b.n	80015ba <HAL_GPIO_Init+0x13e>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	3304      	adds	r3, #4
 80015ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	2bff      	cmp	r3, #255	; 0xff
 80015c0:	d802      	bhi.n	80015c8 <HAL_GPIO_Init+0x14c>
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	e002      	b.n	80015ce <HAL_GPIO_Init+0x152>
 80015c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ca:	3b08      	subs	r3, #8
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	210f      	movs	r1, #15
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	fa01 f303 	lsl.w	r3, r1, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	401a      	ands	r2, r3
 80015e0:	6a39      	ldr	r1, [r7, #32]
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	fa01 f303 	lsl.w	r3, r1, r3
 80015e8:	431a      	orrs	r2, r3
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 80a9 	beq.w	800174e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015fc:	4b4a      	ldr	r3, [pc, #296]	; (8001728 <HAL_GPIO_Init+0x2ac>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	4a49      	ldr	r2, [pc, #292]	; (8001728 <HAL_GPIO_Init+0x2ac>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	6193      	str	r3, [r2, #24]
 8001608:	4b47      	ldr	r3, [pc, #284]	; (8001728 <HAL_GPIO_Init+0x2ac>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001614:	4a45      	ldr	r2, [pc, #276]	; (800172c <HAL_GPIO_Init+0x2b0>)
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	089b      	lsrs	r3, r3, #2
 800161a:	3302      	adds	r3, #2
 800161c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001620:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	f003 0303 	and.w	r3, r3, #3
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	220f      	movs	r2, #15
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	4013      	ands	r3, r2
 8001636:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a3d      	ldr	r2, [pc, #244]	; (8001730 <HAL_GPIO_Init+0x2b4>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d00d      	beq.n	800165c <HAL_GPIO_Init+0x1e0>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a3c      	ldr	r2, [pc, #240]	; (8001734 <HAL_GPIO_Init+0x2b8>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d007      	beq.n	8001658 <HAL_GPIO_Init+0x1dc>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a3b      	ldr	r2, [pc, #236]	; (8001738 <HAL_GPIO_Init+0x2bc>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d101      	bne.n	8001654 <HAL_GPIO_Init+0x1d8>
 8001650:	2302      	movs	r3, #2
 8001652:	e004      	b.n	800165e <HAL_GPIO_Init+0x1e2>
 8001654:	2303      	movs	r3, #3
 8001656:	e002      	b.n	800165e <HAL_GPIO_Init+0x1e2>
 8001658:	2301      	movs	r3, #1
 800165a:	e000      	b.n	800165e <HAL_GPIO_Init+0x1e2>
 800165c:	2300      	movs	r3, #0
 800165e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001660:	f002 0203 	and.w	r2, r2, #3
 8001664:	0092      	lsls	r2, r2, #2
 8001666:	4093      	lsls	r3, r2
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	4313      	orrs	r3, r2
 800166c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800166e:	492f      	ldr	r1, [pc, #188]	; (800172c <HAL_GPIO_Init+0x2b0>)
 8001670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001672:	089b      	lsrs	r3, r3, #2
 8001674:	3302      	adds	r3, #2
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d006      	beq.n	8001696 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001688:	4b2c      	ldr	r3, [pc, #176]	; (800173c <HAL_GPIO_Init+0x2c0>)
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	492b      	ldr	r1, [pc, #172]	; (800173c <HAL_GPIO_Init+0x2c0>)
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	4313      	orrs	r3, r2
 8001692:	608b      	str	r3, [r1, #8]
 8001694:	e006      	b.n	80016a4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001696:	4b29      	ldr	r3, [pc, #164]	; (800173c <HAL_GPIO_Init+0x2c0>)
 8001698:	689a      	ldr	r2, [r3, #8]
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	43db      	mvns	r3, r3
 800169e:	4927      	ldr	r1, [pc, #156]	; (800173c <HAL_GPIO_Init+0x2c0>)
 80016a0:	4013      	ands	r3, r2
 80016a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d006      	beq.n	80016be <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016b0:	4b22      	ldr	r3, [pc, #136]	; (800173c <HAL_GPIO_Init+0x2c0>)
 80016b2:	68da      	ldr	r2, [r3, #12]
 80016b4:	4921      	ldr	r1, [pc, #132]	; (800173c <HAL_GPIO_Init+0x2c0>)
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	60cb      	str	r3, [r1, #12]
 80016bc:	e006      	b.n	80016cc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016be:	4b1f      	ldr	r3, [pc, #124]	; (800173c <HAL_GPIO_Init+0x2c0>)
 80016c0:	68da      	ldr	r2, [r3, #12]
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	43db      	mvns	r3, r3
 80016c6:	491d      	ldr	r1, [pc, #116]	; (800173c <HAL_GPIO_Init+0x2c0>)
 80016c8:	4013      	ands	r3, r2
 80016ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d006      	beq.n	80016e6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016d8:	4b18      	ldr	r3, [pc, #96]	; (800173c <HAL_GPIO_Init+0x2c0>)
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	4917      	ldr	r1, [pc, #92]	; (800173c <HAL_GPIO_Init+0x2c0>)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	604b      	str	r3, [r1, #4]
 80016e4:	e006      	b.n	80016f4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <HAL_GPIO_Init+0x2c0>)
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	4913      	ldr	r1, [pc, #76]	; (800173c <HAL_GPIO_Init+0x2c0>)
 80016f0:	4013      	ands	r3, r2
 80016f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d01f      	beq.n	8001740 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001700:	4b0e      	ldr	r3, [pc, #56]	; (800173c <HAL_GPIO_Init+0x2c0>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	490d      	ldr	r1, [pc, #52]	; (800173c <HAL_GPIO_Init+0x2c0>)
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	4313      	orrs	r3, r2
 800170a:	600b      	str	r3, [r1, #0]
 800170c:	e01f      	b.n	800174e <HAL_GPIO_Init+0x2d2>
 800170e:	bf00      	nop
 8001710:	10320000 	.word	0x10320000
 8001714:	10310000 	.word	0x10310000
 8001718:	10220000 	.word	0x10220000
 800171c:	10210000 	.word	0x10210000
 8001720:	10120000 	.word	0x10120000
 8001724:	10110000 	.word	0x10110000
 8001728:	40021000 	.word	0x40021000
 800172c:	40010000 	.word	0x40010000
 8001730:	40010800 	.word	0x40010800
 8001734:	40010c00 	.word	0x40010c00
 8001738:	40011000 	.word	0x40011000
 800173c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001740:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <HAL_GPIO_Init+0x2f4>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	43db      	mvns	r3, r3
 8001748:	4909      	ldr	r1, [pc, #36]	; (8001770 <HAL_GPIO_Init+0x2f4>)
 800174a:	4013      	ands	r3, r2
 800174c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800174e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001750:	3301      	adds	r3, #1
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	fa22 f303 	lsr.w	r3, r2, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	f47f ae96 	bne.w	8001490 <HAL_GPIO_Init+0x14>
  }
}
 8001764:	bf00      	nop
 8001766:	bf00      	nop
 8001768:	372c      	adds	r7, #44	; 0x2c
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr
 8001770:	40010400 	.word	0x40010400

08001774 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	887b      	ldrh	r3, [r7, #2]
 8001786:	4013      	ands	r3, r2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d002      	beq.n	8001792 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800178c:	2301      	movs	r3, #1
 800178e:	73fb      	strb	r3, [r7, #15]
 8001790:	e001      	b.n	8001796 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001792:	2300      	movs	r3, #0
 8001794:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001796:	7bfb      	ldrb	r3, [r7, #15]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr

080017a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	460b      	mov	r3, r1
 80017ac:	807b      	strh	r3, [r7, #2]
 80017ae:	4613      	mov	r3, r2
 80017b0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017b2:	787b      	ldrb	r3, [r7, #1]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d003      	beq.n	80017c0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017b8:	887a      	ldrh	r2, [r7, #2]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017be:	e003      	b.n	80017c8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017c0:	887b      	ldrh	r3, [r7, #2]
 80017c2:	041a      	lsls	r2, r3, #16
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	611a      	str	r2, [r3, #16]
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr

080017d2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b085      	sub	sp, #20
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
 80017da:	460b      	mov	r3, r1
 80017dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017e4:	887a      	ldrh	r2, [r7, #2]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	4013      	ands	r3, r2
 80017ea:	041a      	lsls	r2, r3, #16
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	43d9      	mvns	r1, r3
 80017f0:	887b      	ldrh	r3, [r7, #2]
 80017f2:	400b      	ands	r3, r1
 80017f4:	431a      	orrs	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	611a      	str	r2, [r3, #16]
}
 80017fa:	bf00      	nop
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr

08001804 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e272      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 8087 	beq.w	8001932 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001824:	4b92      	ldr	r3, [pc, #584]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 030c 	and.w	r3, r3, #12
 800182c:	2b04      	cmp	r3, #4
 800182e:	d00c      	beq.n	800184a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001830:	4b8f      	ldr	r3, [pc, #572]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 030c 	and.w	r3, r3, #12
 8001838:	2b08      	cmp	r3, #8
 800183a:	d112      	bne.n	8001862 <HAL_RCC_OscConfig+0x5e>
 800183c:	4b8c      	ldr	r3, [pc, #560]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001848:	d10b      	bne.n	8001862 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800184a:	4b89      	ldr	r3, [pc, #548]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d06c      	beq.n	8001930 <HAL_RCC_OscConfig+0x12c>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d168      	bne.n	8001930 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e24c      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800186a:	d106      	bne.n	800187a <HAL_RCC_OscConfig+0x76>
 800186c:	4b80      	ldr	r3, [pc, #512]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a7f      	ldr	r2, [pc, #508]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001876:	6013      	str	r3, [r2, #0]
 8001878:	e02e      	b.n	80018d8 <HAL_RCC_OscConfig+0xd4>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d10c      	bne.n	800189c <HAL_RCC_OscConfig+0x98>
 8001882:	4b7b      	ldr	r3, [pc, #492]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a7a      	ldr	r2, [pc, #488]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	4b78      	ldr	r3, [pc, #480]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a77      	ldr	r2, [pc, #476]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001894:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	e01d      	b.n	80018d8 <HAL_RCC_OscConfig+0xd4>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018a4:	d10c      	bne.n	80018c0 <HAL_RCC_OscConfig+0xbc>
 80018a6:	4b72      	ldr	r3, [pc, #456]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a71      	ldr	r2, [pc, #452]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	4b6f      	ldr	r3, [pc, #444]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a6e      	ldr	r2, [pc, #440]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	e00b      	b.n	80018d8 <HAL_RCC_OscConfig+0xd4>
 80018c0:	4b6b      	ldr	r3, [pc, #428]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a6a      	ldr	r2, [pc, #424]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	4b68      	ldr	r3, [pc, #416]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a67      	ldr	r2, [pc, #412]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d013      	beq.n	8001908 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e0:	f7ff fcb4 	bl	800124c <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e8:	f7ff fcb0 	bl	800124c <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b64      	cmp	r3, #100	; 0x64
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e200      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fa:	4b5d      	ldr	r3, [pc, #372]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0f0      	beq.n	80018e8 <HAL_RCC_OscConfig+0xe4>
 8001906:	e014      	b.n	8001932 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001908:	f7ff fca0 	bl	800124c <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001910:	f7ff fc9c 	bl	800124c <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b64      	cmp	r3, #100	; 0x64
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e1ec      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001922:	4b53      	ldr	r3, [pc, #332]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f0      	bne.n	8001910 <HAL_RCC_OscConfig+0x10c>
 800192e:	e000      	b.n	8001932 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d063      	beq.n	8001a06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800193e:	4b4c      	ldr	r3, [pc, #304]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 030c 	and.w	r3, r3, #12
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00b      	beq.n	8001962 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800194a:	4b49      	ldr	r3, [pc, #292]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 030c 	and.w	r3, r3, #12
 8001952:	2b08      	cmp	r3, #8
 8001954:	d11c      	bne.n	8001990 <HAL_RCC_OscConfig+0x18c>
 8001956:	4b46      	ldr	r3, [pc, #280]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d116      	bne.n	8001990 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001962:	4b43      	ldr	r3, [pc, #268]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d005      	beq.n	800197a <HAL_RCC_OscConfig+0x176>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d001      	beq.n	800197a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e1c0      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197a:	4b3d      	ldr	r3, [pc, #244]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	4939      	ldr	r1, [pc, #228]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 800198a:	4313      	orrs	r3, r2
 800198c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800198e:	e03a      	b.n	8001a06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d020      	beq.n	80019da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001998:	4b36      	ldr	r3, [pc, #216]	; (8001a74 <HAL_RCC_OscConfig+0x270>)
 800199a:	2201      	movs	r2, #1
 800199c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199e:	f7ff fc55 	bl	800124c <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a6:	f7ff fc51 	bl	800124c <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e1a1      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b8:	4b2d      	ldr	r3, [pc, #180]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0f0      	beq.n	80019a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c4:	4b2a      	ldr	r3, [pc, #168]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	4927      	ldr	r1, [pc, #156]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	600b      	str	r3, [r1, #0]
 80019d8:	e015      	b.n	8001a06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019da:	4b26      	ldr	r3, [pc, #152]	; (8001a74 <HAL_RCC_OscConfig+0x270>)
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e0:	f7ff fc34 	bl	800124c <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e8:	f7ff fc30 	bl	800124c <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e180      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019fa:	4b1d      	ldr	r3, [pc, #116]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f0      	bne.n	80019e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d03a      	beq.n	8001a88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d019      	beq.n	8001a4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a1a:	4b17      	ldr	r3, [pc, #92]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a20:	f7ff fc14 	bl	800124c <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a28:	f7ff fc10 	bl	800124c <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e160      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a3a:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0f0      	beq.n	8001a28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a46:	2001      	movs	r0, #1
 8001a48:	f000 fa9c 	bl	8001f84 <RCC_Delay>
 8001a4c:	e01c      	b.n	8001a88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a54:	f7ff fbfa 	bl	800124c <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a5a:	e00f      	b.n	8001a7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a5c:	f7ff fbf6 	bl	800124c <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d908      	bls.n	8001a7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e146      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
 8001a6e:	bf00      	nop
 8001a70:	40021000 	.word	0x40021000
 8001a74:	42420000 	.word	0x42420000
 8001a78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a7c:	4b92      	ldr	r3, [pc, #584]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1e9      	bne.n	8001a5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f000 80a6 	beq.w	8001be2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a96:	2300      	movs	r3, #0
 8001a98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a9a:	4b8b      	ldr	r3, [pc, #556]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10d      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa6:	4b88      	ldr	r3, [pc, #544]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	4a87      	ldr	r2, [pc, #540]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab0:	61d3      	str	r3, [r2, #28]
 8001ab2:	4b85      	ldr	r3, [pc, #532]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac2:	4b82      	ldr	r3, [pc, #520]	; (8001ccc <HAL_RCC_OscConfig+0x4c8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d118      	bne.n	8001b00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ace:	4b7f      	ldr	r3, [pc, #508]	; (8001ccc <HAL_RCC_OscConfig+0x4c8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a7e      	ldr	r2, [pc, #504]	; (8001ccc <HAL_RCC_OscConfig+0x4c8>)
 8001ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ada:	f7ff fbb7 	bl	800124c <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae2:	f7ff fbb3 	bl	800124c <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b64      	cmp	r3, #100	; 0x64
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e103      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af4:	4b75      	ldr	r3, [pc, #468]	; (8001ccc <HAL_RCC_OscConfig+0x4c8>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0f0      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d106      	bne.n	8001b16 <HAL_RCC_OscConfig+0x312>
 8001b08:	4b6f      	ldr	r3, [pc, #444]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	4a6e      	ldr	r2, [pc, #440]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	6213      	str	r3, [r2, #32]
 8001b14:	e02d      	b.n	8001b72 <HAL_RCC_OscConfig+0x36e>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10c      	bne.n	8001b38 <HAL_RCC_OscConfig+0x334>
 8001b1e:	4b6a      	ldr	r3, [pc, #424]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	4a69      	ldr	r2, [pc, #420]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b24:	f023 0301 	bic.w	r3, r3, #1
 8001b28:	6213      	str	r3, [r2, #32]
 8001b2a:	4b67      	ldr	r3, [pc, #412]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	4a66      	ldr	r2, [pc, #408]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b30:	f023 0304 	bic.w	r3, r3, #4
 8001b34:	6213      	str	r3, [r2, #32]
 8001b36:	e01c      	b.n	8001b72 <HAL_RCC_OscConfig+0x36e>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	2b05      	cmp	r3, #5
 8001b3e:	d10c      	bne.n	8001b5a <HAL_RCC_OscConfig+0x356>
 8001b40:	4b61      	ldr	r3, [pc, #388]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	4a60      	ldr	r2, [pc, #384]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b46:	f043 0304 	orr.w	r3, r3, #4
 8001b4a:	6213      	str	r3, [r2, #32]
 8001b4c:	4b5e      	ldr	r3, [pc, #376]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	4a5d      	ldr	r2, [pc, #372]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	6213      	str	r3, [r2, #32]
 8001b58:	e00b      	b.n	8001b72 <HAL_RCC_OscConfig+0x36e>
 8001b5a:	4b5b      	ldr	r3, [pc, #364]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	4a5a      	ldr	r2, [pc, #360]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b60:	f023 0301 	bic.w	r3, r3, #1
 8001b64:	6213      	str	r3, [r2, #32]
 8001b66:	4b58      	ldr	r3, [pc, #352]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b68:	6a1b      	ldr	r3, [r3, #32]
 8001b6a:	4a57      	ldr	r2, [pc, #348]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b6c:	f023 0304 	bic.w	r3, r3, #4
 8001b70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d015      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b7a:	f7ff fb67 	bl	800124c <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b80:	e00a      	b.n	8001b98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b82:	f7ff fb63 	bl	800124c <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e0b1      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b98:	4b4b      	ldr	r3, [pc, #300]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0ee      	beq.n	8001b82 <HAL_RCC_OscConfig+0x37e>
 8001ba4:	e014      	b.n	8001bd0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba6:	f7ff fb51 	bl	800124c <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bac:	e00a      	b.n	8001bc4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bae:	f7ff fb4d 	bl	800124c <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e09b      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc4:	4b40      	ldr	r3, [pc, #256]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1ee      	bne.n	8001bae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bd0:	7dfb      	ldrb	r3, [r7, #23]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d105      	bne.n	8001be2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd6:	4b3c      	ldr	r3, [pc, #240]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	4a3b      	ldr	r2, [pc, #236]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001bdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001be0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 8087 	beq.w	8001cfa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bec:	4b36      	ldr	r3, [pc, #216]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 030c 	and.w	r3, r3, #12
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d061      	beq.n	8001cbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d146      	bne.n	8001c8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c00:	4b33      	ldr	r3, [pc, #204]	; (8001cd0 <HAL_RCC_OscConfig+0x4cc>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c06:	f7ff fb21 	bl	800124c <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c0e:	f7ff fb1d 	bl	800124c <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e06d      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c20:	4b29      	ldr	r3, [pc, #164]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1f0      	bne.n	8001c0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c34:	d108      	bne.n	8001c48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c36:	4b24      	ldr	r3, [pc, #144]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	4921      	ldr	r1, [pc, #132]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c48:	4b1f      	ldr	r3, [pc, #124]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a19      	ldr	r1, [r3, #32]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c58:	430b      	orrs	r3, r1
 8001c5a:	491b      	ldr	r1, [pc, #108]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c60:	4b1b      	ldr	r3, [pc, #108]	; (8001cd0 <HAL_RCC_OscConfig+0x4cc>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c66:	f7ff faf1 	bl	800124c <HAL_GetTick>
 8001c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c6c:	e008      	b.n	8001c80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6e:	f7ff faed 	bl	800124c <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e03d      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c80:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d0f0      	beq.n	8001c6e <HAL_RCC_OscConfig+0x46a>
 8001c8c:	e035      	b.n	8001cfa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8e:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <HAL_RCC_OscConfig+0x4cc>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c94:	f7ff fada 	bl	800124c <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c9c:	f7ff fad6 	bl	800124c <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e026      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cae:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f0      	bne.n	8001c9c <HAL_RCC_OscConfig+0x498>
 8001cba:	e01e      	b.n	8001cfa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d107      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e019      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40007000 	.word	0x40007000
 8001cd0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <HAL_RCC_OscConfig+0x500>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d106      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d001      	beq.n	8001cfa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e000      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40021000 	.word	0x40021000

08001d08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e0d0      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d1c:	4b6a      	ldr	r3, [pc, #424]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d910      	bls.n	8001d4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2a:	4b67      	ldr	r3, [pc, #412]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f023 0207 	bic.w	r2, r3, #7
 8001d32:	4965      	ldr	r1, [pc, #404]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3a:	4b63      	ldr	r3, [pc, #396]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d001      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e0b8      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d020      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d005      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d64:	4b59      	ldr	r3, [pc, #356]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	4a58      	ldr	r2, [pc, #352]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001d6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0308 	and.w	r3, r3, #8
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d005      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d7c:	4b53      	ldr	r3, [pc, #332]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	4a52      	ldr	r2, [pc, #328]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001d82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d88:	4b50      	ldr	r3, [pc, #320]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	494d      	ldr	r1, [pc, #308]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d040      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d107      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dae:	4b47      	ldr	r3, [pc, #284]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d115      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e07f      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d107      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc6:	4b41      	ldr	r3, [pc, #260]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d109      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e073      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd6:	4b3d      	ldr	r3, [pc, #244]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e06b      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001de6:	4b39      	ldr	r3, [pc, #228]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f023 0203 	bic.w	r2, r3, #3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	4936      	ldr	r1, [pc, #216]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001df8:	f7ff fa28 	bl	800124c <HAL_GetTick>
 8001dfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfe:	e00a      	b.n	8001e16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e00:	f7ff fa24 	bl	800124c <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e053      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e16:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f003 020c 	and.w	r2, r3, #12
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d1eb      	bne.n	8001e00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e28:	4b27      	ldr	r3, [pc, #156]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d210      	bcs.n	8001e58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e36:	4b24      	ldr	r3, [pc, #144]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f023 0207 	bic.w	r2, r3, #7
 8001e3e:	4922      	ldr	r1, [pc, #136]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e46:	4b20      	ldr	r3, [pc, #128]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d001      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e032      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d008      	beq.n	8001e76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e64:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	4916      	ldr	r1, [pc, #88]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0308 	and.w	r3, r3, #8
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d009      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e82:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	490e      	ldr	r1, [pc, #56]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e96:	f000 f821 	bl	8001edc <HAL_RCC_GetSysClockFreq>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	091b      	lsrs	r3, r3, #4
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	490a      	ldr	r1, [pc, #40]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ea8:	5ccb      	ldrb	r3, [r1, r3]
 8001eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8001eae:	4a09      	ldr	r2, [pc, #36]	; (8001ed4 <HAL_RCC_ClockConfig+0x1cc>)
 8001eb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001eb2:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <HAL_RCC_ClockConfig+0x1d0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff f986 	bl	80011c8 <HAL_InitTick>

  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40022000 	.word	0x40022000
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	080027f0 	.word	0x080027f0
 8001ed4:	2000002c 	.word	0x2000002c
 8001ed8:	20000030 	.word	0x20000030

08001edc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b087      	sub	sp, #28
 8001ee0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60bb      	str	r3, [r7, #8]
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ef6:	4b1e      	ldr	r3, [pc, #120]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f003 030c 	and.w	r3, r3, #12
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	d002      	beq.n	8001f0c <HAL_RCC_GetSysClockFreq+0x30>
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d003      	beq.n	8001f12 <HAL_RCC_GetSysClockFreq+0x36>
 8001f0a:	e027      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f0c:	4b19      	ldr	r3, [pc, #100]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f0e:	613b      	str	r3, [r7, #16]
      break;
 8001f10:	e027      	b.n	8001f62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	0c9b      	lsrs	r3, r3, #18
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	4a17      	ldr	r2, [pc, #92]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f1c:	5cd3      	ldrb	r3, [r2, r3]
 8001f1e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d010      	beq.n	8001f4c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f2a:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	0c5b      	lsrs	r3, r3, #17
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	4a11      	ldr	r2, [pc, #68]	; (8001f7c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f36:	5cd3      	ldrb	r3, [r2, r3]
 8001f38:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a0d      	ldr	r2, [pc, #52]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f3e:	fb03 f202 	mul.w	r2, r3, r2
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	e004      	b.n	8001f56 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a0c      	ldr	r2, [pc, #48]	; (8001f80 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f50:	fb02 f303 	mul.w	r3, r2, r3
 8001f54:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	613b      	str	r3, [r7, #16]
      break;
 8001f5a:	e002      	b.n	8001f62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f5c:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f5e:	613b      	str	r3, [r7, #16]
      break;
 8001f60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f62:	693b      	ldr	r3, [r7, #16]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	371c      	adds	r7, #28
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	40021000 	.word	0x40021000
 8001f74:	007a1200 	.word	0x007a1200
 8001f78:	08002800 	.word	0x08002800
 8001f7c:	08002810 	.word	0x08002810
 8001f80:	003d0900 	.word	0x003d0900

08001f84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f8c:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <RCC_Delay+0x34>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a0a      	ldr	r2, [pc, #40]	; (8001fbc <RCC_Delay+0x38>)
 8001f92:	fba2 2303 	umull	r2, r3, r2, r3
 8001f96:	0a5b      	lsrs	r3, r3, #9
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	fb02 f303 	mul.w	r3, r2, r3
 8001f9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fa0:	bf00      	nop
  }
  while (Delay --);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	1e5a      	subs	r2, r3, #1
 8001fa6:	60fa      	str	r2, [r7, #12]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1f9      	bne.n	8001fa0 <RCC_Delay+0x1c>
}
 8001fac:	bf00      	nop
 8001fae:	bf00      	nop
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr
 8001fb8:	2000002c 	.word	0x2000002c
 8001fbc:	10624dd3 	.word	0x10624dd3

08001fc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e041      	b.n	8002056 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d106      	bne.n	8001fec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff f856 	bl	8001098 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3304      	adds	r3, #4
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4610      	mov	r0, r2
 8002000:	f000 fa56 	bl	80024b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
	...

08002060 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b01      	cmp	r3, #1
 8002072:	d001      	beq.n	8002078 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e035      	b.n	80020e4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2202      	movs	r2, #2
 800207c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0201 	orr.w	r2, r2, #1
 800208e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a16      	ldr	r2, [pc, #88]	; (80020f0 <HAL_TIM_Base_Start_IT+0x90>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d009      	beq.n	80020ae <HAL_TIM_Base_Start_IT+0x4e>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a2:	d004      	beq.n	80020ae <HAL_TIM_Base_Start_IT+0x4e>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a12      	ldr	r2, [pc, #72]	; (80020f4 <HAL_TIM_Base_Start_IT+0x94>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d111      	bne.n	80020d2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2b06      	cmp	r3, #6
 80020be:	d010      	beq.n	80020e2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f042 0201 	orr.w	r2, r2, #1
 80020ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020d0:	e007      	b.n	80020e2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f042 0201 	orr.w	r2, r2, #1
 80020e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bc80      	pop	{r7}
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	40012c00 	.word	0x40012c00
 80020f4:	40000400 	.word	0x40000400

080020f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d020      	beq.n	800215c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d01b      	beq.n	800215c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f06f 0202 	mvn.w	r2, #2
 800212c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	f003 0303 	and.w	r3, r3, #3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f998 	bl	8002478 <HAL_TIM_IC_CaptureCallback>
 8002148:	e005      	b.n	8002156 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f98b 	bl	8002466 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 f99a 	bl	800248a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	2b00      	cmp	r3, #0
 8002164:	d020      	beq.n	80021a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	2b00      	cmp	r3, #0
 800216e:	d01b      	beq.n	80021a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f06f 0204 	mvn.w	r2, #4
 8002178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2202      	movs	r2, #2
 800217e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f972 	bl	8002478 <HAL_TIM_IC_CaptureCallback>
 8002194:	e005      	b.n	80021a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f965 	bl	8002466 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f974 	bl	800248a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	f003 0308 	and.w	r3, r3, #8
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d020      	beq.n	80021f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f003 0308 	and.w	r3, r3, #8
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d01b      	beq.n	80021f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f06f 0208 	mvn.w	r2, #8
 80021c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2204      	movs	r2, #4
 80021ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f94c 	bl	8002478 <HAL_TIM_IC_CaptureCallback>
 80021e0:	e005      	b.n	80021ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f93f 	bl	8002466 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 f94e 	bl	800248a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	f003 0310 	and.w	r3, r3, #16
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d020      	beq.n	8002240 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f003 0310 	and.w	r3, r3, #16
 8002204:	2b00      	cmp	r3, #0
 8002206:	d01b      	beq.n	8002240 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f06f 0210 	mvn.w	r2, #16
 8002210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2208      	movs	r2, #8
 8002216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f926 	bl	8002478 <HAL_TIM_IC_CaptureCallback>
 800222c:	e005      	b.n	800223a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 f919 	bl	8002466 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 f928 	bl	800248a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00c      	beq.n	8002264 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b00      	cmp	r3, #0
 8002252:	d007      	beq.n	8002264 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f06f 0201 	mvn.w	r2, #1
 800225c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7fe fc28 	bl	8000ab4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00c      	beq.n	8002288 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002274:	2b00      	cmp	r3, #0
 8002276:	d007      	beq.n	8002288 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 fa6f 	bl	8002766 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00c      	beq.n	80022ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002298:	2b00      	cmp	r3, #0
 800229a:	d007      	beq.n	80022ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f8f8 	bl	800249c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	f003 0320 	and.w	r3, r3, #32
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00c      	beq.n	80022d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f003 0320 	and.w	r3, r3, #32
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d007      	beq.n	80022d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f06f 0220 	mvn.w	r2, #32
 80022c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 fa42 	bl	8002754 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022d0:	bf00      	nop
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022e2:	2300      	movs	r3, #0
 80022e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d101      	bne.n	80022f4 <HAL_TIM_ConfigClockSource+0x1c>
 80022f0:	2302      	movs	r3, #2
 80022f2:	e0b4      	b.n	800245e <HAL_TIM_ConfigClockSource+0x186>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2202      	movs	r2, #2
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002312:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800231a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68ba      	ldr	r2, [r7, #8]
 8002322:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800232c:	d03e      	beq.n	80023ac <HAL_TIM_ConfigClockSource+0xd4>
 800232e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002332:	f200 8087 	bhi.w	8002444 <HAL_TIM_ConfigClockSource+0x16c>
 8002336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800233a:	f000 8086 	beq.w	800244a <HAL_TIM_ConfigClockSource+0x172>
 800233e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002342:	d87f      	bhi.n	8002444 <HAL_TIM_ConfigClockSource+0x16c>
 8002344:	2b70      	cmp	r3, #112	; 0x70
 8002346:	d01a      	beq.n	800237e <HAL_TIM_ConfigClockSource+0xa6>
 8002348:	2b70      	cmp	r3, #112	; 0x70
 800234a:	d87b      	bhi.n	8002444 <HAL_TIM_ConfigClockSource+0x16c>
 800234c:	2b60      	cmp	r3, #96	; 0x60
 800234e:	d050      	beq.n	80023f2 <HAL_TIM_ConfigClockSource+0x11a>
 8002350:	2b60      	cmp	r3, #96	; 0x60
 8002352:	d877      	bhi.n	8002444 <HAL_TIM_ConfigClockSource+0x16c>
 8002354:	2b50      	cmp	r3, #80	; 0x50
 8002356:	d03c      	beq.n	80023d2 <HAL_TIM_ConfigClockSource+0xfa>
 8002358:	2b50      	cmp	r3, #80	; 0x50
 800235a:	d873      	bhi.n	8002444 <HAL_TIM_ConfigClockSource+0x16c>
 800235c:	2b40      	cmp	r3, #64	; 0x40
 800235e:	d058      	beq.n	8002412 <HAL_TIM_ConfigClockSource+0x13a>
 8002360:	2b40      	cmp	r3, #64	; 0x40
 8002362:	d86f      	bhi.n	8002444 <HAL_TIM_ConfigClockSource+0x16c>
 8002364:	2b30      	cmp	r3, #48	; 0x30
 8002366:	d064      	beq.n	8002432 <HAL_TIM_ConfigClockSource+0x15a>
 8002368:	2b30      	cmp	r3, #48	; 0x30
 800236a:	d86b      	bhi.n	8002444 <HAL_TIM_ConfigClockSource+0x16c>
 800236c:	2b20      	cmp	r3, #32
 800236e:	d060      	beq.n	8002432 <HAL_TIM_ConfigClockSource+0x15a>
 8002370:	2b20      	cmp	r3, #32
 8002372:	d867      	bhi.n	8002444 <HAL_TIM_ConfigClockSource+0x16c>
 8002374:	2b00      	cmp	r3, #0
 8002376:	d05c      	beq.n	8002432 <HAL_TIM_ConfigClockSource+0x15a>
 8002378:	2b10      	cmp	r3, #16
 800237a:	d05a      	beq.n	8002432 <HAL_TIM_ConfigClockSource+0x15a>
 800237c:	e062      	b.n	8002444 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6818      	ldr	r0, [r3, #0]
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	6899      	ldr	r1, [r3, #8]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	f000 f96a 	bl	8002666 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	609a      	str	r2, [r3, #8]
      break;
 80023aa:	e04f      	b.n	800244c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6818      	ldr	r0, [r3, #0]
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	6899      	ldr	r1, [r3, #8]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	f000 f953 	bl	8002666 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023ce:	609a      	str	r2, [r3, #8]
      break;
 80023d0:	e03c      	b.n	800244c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6818      	ldr	r0, [r3, #0]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	6859      	ldr	r1, [r3, #4]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	461a      	mov	r2, r3
 80023e0:	f000 f8ca 	bl	8002578 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2150      	movs	r1, #80	; 0x50
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 f921 	bl	8002632 <TIM_ITRx_SetConfig>
      break;
 80023f0:	e02c      	b.n	800244c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6818      	ldr	r0, [r3, #0]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	6859      	ldr	r1, [r3, #4]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	461a      	mov	r2, r3
 8002400:	f000 f8e8 	bl	80025d4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2160      	movs	r1, #96	; 0x60
 800240a:	4618      	mov	r0, r3
 800240c:	f000 f911 	bl	8002632 <TIM_ITRx_SetConfig>
      break;
 8002410:	e01c      	b.n	800244c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6818      	ldr	r0, [r3, #0]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	6859      	ldr	r1, [r3, #4]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	461a      	mov	r2, r3
 8002420:	f000 f8aa 	bl	8002578 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2140      	movs	r1, #64	; 0x40
 800242a:	4618      	mov	r0, r3
 800242c:	f000 f901 	bl	8002632 <TIM_ITRx_SetConfig>
      break;
 8002430:	e00c      	b.n	800244c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4619      	mov	r1, r3
 800243c:	4610      	mov	r0, r2
 800243e:	f000 f8f8 	bl	8002632 <TIM_ITRx_SetConfig>
      break;
 8002442:	e003      	b.n	800244c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	73fb      	strb	r3, [r7, #15]
      break;
 8002448:	e000      	b.n	800244c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800244a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800245c:	7bfb      	ldrb	r3, [r7, #15]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr

08002478 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr

0800248a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr

0800249c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bc80      	pop	{r7}
 80024ac:	4770      	bx	lr
	...

080024b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a2b      	ldr	r2, [pc, #172]	; (8002570 <TIM_Base_SetConfig+0xc0>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d007      	beq.n	80024d8 <TIM_Base_SetConfig+0x28>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ce:	d003      	beq.n	80024d8 <TIM_Base_SetConfig+0x28>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a28      	ldr	r2, [pc, #160]	; (8002574 <TIM_Base_SetConfig+0xc4>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d108      	bne.n	80024ea <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a20      	ldr	r2, [pc, #128]	; (8002570 <TIM_Base_SetConfig+0xc0>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d007      	beq.n	8002502 <TIM_Base_SetConfig+0x52>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f8:	d003      	beq.n	8002502 <TIM_Base_SetConfig+0x52>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a1d      	ldr	r2, [pc, #116]	; (8002574 <TIM_Base_SetConfig+0xc4>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d108      	bne.n	8002514 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002508:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	4313      	orrs	r3, r2
 8002512:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	4313      	orrs	r3, r2
 8002520:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a0d      	ldr	r2, [pc, #52]	; (8002570 <TIM_Base_SetConfig+0xc0>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d103      	bne.n	8002548 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	691a      	ldr	r2, [r3, #16]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d005      	beq.n	8002566 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	f023 0201 	bic.w	r2, r3, #1
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	611a      	str	r2, [r3, #16]
  }
}
 8002566:	bf00      	nop
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr
 8002570:	40012c00 	.word	0x40012c00
 8002574:	40000400 	.word	0x40000400

08002578 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002578:	b480      	push	{r7}
 800257a:	b087      	sub	sp, #28
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	f023 0201 	bic.w	r2, r3, #1
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	011b      	lsls	r3, r3, #4
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	f023 030a 	bic.w	r3, r3, #10
 80025b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	621a      	str	r2, [r3, #32]
}
 80025ca:	bf00      	nop
 80025cc:	371c      	adds	r7, #28
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr

080025d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b087      	sub	sp, #28
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	f023 0210 	bic.w	r2, r3, #16
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80025fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	031b      	lsls	r3, r3, #12
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	4313      	orrs	r3, r2
 8002608:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002610:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	011b      	lsls	r3, r3, #4
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	4313      	orrs	r3, r2
 800261a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	621a      	str	r2, [r3, #32]
}
 8002628:	bf00      	nop
 800262a:	371c      	adds	r7, #28
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr

08002632 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002632:	b480      	push	{r7}
 8002634:	b085      	sub	sp, #20
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002648:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4313      	orrs	r3, r2
 8002650:	f043 0307 	orr.w	r3, r3, #7
 8002654:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	609a      	str	r2, [r3, #8]
}
 800265c:	bf00      	nop
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr

08002666 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002666:	b480      	push	{r7}
 8002668:	b087      	sub	sp, #28
 800266a:	af00      	add	r7, sp, #0
 800266c:	60f8      	str	r0, [r7, #12]
 800266e:	60b9      	str	r1, [r7, #8]
 8002670:	607a      	str	r2, [r7, #4]
 8002672:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002680:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	021a      	lsls	r2, r3, #8
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	431a      	orrs	r2, r3
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	4313      	orrs	r3, r2
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	4313      	orrs	r3, r2
 8002692:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	609a      	str	r2, [r3, #8]
}
 800269a:	bf00      	nop
 800269c:	371c      	adds	r7, #28
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr

080026a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d101      	bne.n	80026bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026b8:	2302      	movs	r3, #2
 80026ba:	e041      	b.n	8002740 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2202      	movs	r2, #2
 80026c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a14      	ldr	r2, [pc, #80]	; (800274c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d009      	beq.n	8002714 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002708:	d004      	beq.n	8002714 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a10      	ldr	r2, [pc, #64]	; (8002750 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d10c      	bne.n	800272e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800271a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	68ba      	ldr	r2, [r7, #8]
 8002722:	4313      	orrs	r3, r2
 8002724:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3714      	adds	r7, #20
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	40012c00 	.word	0x40012c00
 8002750:	40000400 	.word	0x40000400

08002754 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr

08002766 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002766:	b480      	push	{r7}
 8002768:	b083      	sub	sp, #12
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr

08002778 <__libc_init_array>:
 8002778:	b570      	push	{r4, r5, r6, lr}
 800277a:	2600      	movs	r6, #0
 800277c:	4d0c      	ldr	r5, [pc, #48]	; (80027b0 <__libc_init_array+0x38>)
 800277e:	4c0d      	ldr	r4, [pc, #52]	; (80027b4 <__libc_init_array+0x3c>)
 8002780:	1b64      	subs	r4, r4, r5
 8002782:	10a4      	asrs	r4, r4, #2
 8002784:	42a6      	cmp	r6, r4
 8002786:	d109      	bne.n	800279c <__libc_init_array+0x24>
 8002788:	f000 f822 	bl	80027d0 <_init>
 800278c:	2600      	movs	r6, #0
 800278e:	4d0a      	ldr	r5, [pc, #40]	; (80027b8 <__libc_init_array+0x40>)
 8002790:	4c0a      	ldr	r4, [pc, #40]	; (80027bc <__libc_init_array+0x44>)
 8002792:	1b64      	subs	r4, r4, r5
 8002794:	10a4      	asrs	r4, r4, #2
 8002796:	42a6      	cmp	r6, r4
 8002798:	d105      	bne.n	80027a6 <__libc_init_array+0x2e>
 800279a:	bd70      	pop	{r4, r5, r6, pc}
 800279c:	f855 3b04 	ldr.w	r3, [r5], #4
 80027a0:	4798      	blx	r3
 80027a2:	3601      	adds	r6, #1
 80027a4:	e7ee      	b.n	8002784 <__libc_init_array+0xc>
 80027a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80027aa:	4798      	blx	r3
 80027ac:	3601      	adds	r6, #1
 80027ae:	e7f2      	b.n	8002796 <__libc_init_array+0x1e>
 80027b0:	08002814 	.word	0x08002814
 80027b4:	08002814 	.word	0x08002814
 80027b8:	08002814 	.word	0x08002814
 80027bc:	08002818 	.word	0x08002818

080027c0 <memset>:
 80027c0:	4603      	mov	r3, r0
 80027c2:	4402      	add	r2, r0
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d100      	bne.n	80027ca <memset+0xa>
 80027c8:	4770      	bx	lr
 80027ca:	f803 1b01 	strb.w	r1, [r3], #1
 80027ce:	e7f9      	b.n	80027c4 <memset+0x4>

080027d0 <_init>:
 80027d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027d2:	bf00      	nop
 80027d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027d6:	bc08      	pop	{r3}
 80027d8:	469e      	mov	lr, r3
 80027da:	4770      	bx	lr

080027dc <_fini>:
 80027dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027de:	bf00      	nop
 80027e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027e2:	bc08      	pop	{r3}
 80027e4:	469e      	mov	lr, r3
 80027e6:	4770      	bx	lr
